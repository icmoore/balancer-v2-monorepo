/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {ethers} from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IAuthorizerAdaptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizerAdaptor__factory>;
    getContractFactory(
      name: "IAuthorizerAdaptorEntrypoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizerAdaptorEntrypoint__factory>;
    getContractFactory(
      name: "IComposableStablePoolRates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComposableStablePoolRates__factory>;
    getContractFactory(
      name: "BasePoolUserData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolUserData__factory>;
    getContractFactory(
      name: "IBasePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePoolFactory__factory>;
    getContractFactory(
      name: "IControlledPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IControlledPool__factory>;
    getContractFactory(
      name: "IPoolVersion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolVersion__factory>;
    getContractFactory(
      name: "IProtocolFeeCache",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeeCache__factory>;
    getContractFactory(
      name: "IRateProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRateProvider__factory>;
    getContractFactory(
      name: "IRateProviderPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRateProviderPool__factory>;
    getContractFactory(
      name: "IRecoveryMode",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRecoveryMode__factory>;
    getContractFactory(
      name: "IAuthentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthentication__factory>;
    getContractFactory(
      name: "ISignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignaturesValidator__factory>;
    getContractFactory(
      name: "ITemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemporarilyPausable__factory>;
    getContractFactory(
      name: "IVersion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersion__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IProtocolFeePercentagesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeePercentagesProvider__factory>;
    getContractFactory(
      name: "IAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizer__factory>;
    getContractFactory(
      name: "IBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePool__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IGeneralPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralPool__factory>;
    getContractFactory(
      name: "IMinimalSwapInfoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalSwapInfoPool__factory>;
    getContractFactory(
      name: "IProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeesCollector__factory>;
    getContractFactory(
      name: "ITimelockAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelockAuthorizer__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "BalancerPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerPoolToken__factory>;
    getContractFactory(
      name: "BaseGeneralPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGeneralPool__factory>;
    getContractFactory(
      name: "BasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePool__factory>;
    getContractFactory(
      name: "BasePoolAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolAuthorization__factory>;
    getContractFactory(
      name: "ProtocolFeeCache",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolFeeCache__factory>;
    getContractFactory(
      name: "BasePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolFactory__factory>;
    getContractFactory(
      name: "FactoryWidePauseWindow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryWidePauseWindow__factory>;
    getContractFactory(
      name: "RecoveryMode",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecoveryMode__factory>;
    getContractFactory(
      name: "MockFailureModes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFailureModes__factory>;
    getContractFactory(
      name: "Authentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authentication__factory>;
    getContractFactory(
      name: "BaseSplitCodeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseSplitCodeFactory__factory>;
    getContractFactory(
      name: "EOASignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EOASignaturesValidator__factory>;
    getContractFactory(
      name: "ExtraCalldataEOASignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExtraCalldataEOASignaturesValidator__factory>;
    getContractFactory(
      name: "SingletonAuthentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingletonAuthentication__factory>;
    getContractFactory(
      name: "PausableConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableConstants__factory>;
    getContractFactory(
      name: "TemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TemporarilyPausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "AssetManagers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetManagers__factory>;
    getContractFactory(
      name: "AssetTransfersHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetTransfersHandler__factory>;
    getContractFactory(
      name: "TimelockAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockAuthorizer__factory>;
    getContractFactory(
      name: "TimelockAuthorizerManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockAuthorizerManagement__factory>;
    getContractFactory(
      name: "TimelockExecutionHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockExecutionHelper__factory>;
    getContractFactory(
      name: "MinimalSwapInfoPoolsBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalSwapInfoPoolsBalance__factory>;
    getContractFactory(
      name: "TwoTokenPoolsBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TwoTokenPoolsBalance__factory>;
    getContractFactory(
      name: "ComposableStablePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableStablePool__factory>;
    getContractFactory(
      name: "ComposableStablePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableStablePoolFactory__factory>;
    getContractFactory(
      name: "ComposableStablePoolProtocolFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableStablePoolProtocolFees__factory>;
    getContractFactory(
      name: "ComposableStablePoolRates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableStablePoolRates__factory>;
    getContractFactory(
      name: "ComposableStablePoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableStablePoolStorage__factory>;
    getContractFactory(
      name: "Fees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fees__factory>;
    getContractFactory(
      name: "FlashLoans",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoans__factory>;
    getContractFactory(
      name: "PoolBalances",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolBalances__factory>;
    getContractFactory(
      name: "PoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolRegistry__factory>;
    getContractFactory(
      name: "PoolTokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolTokens__factory>;
    getContractFactory(
      name: "ProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolFeesCollector__factory>;
    getContractFactory(
      name: "StablePoolAmplification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StablePoolAmplification__factory>;
    getContractFactory(
      name: "Swaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Swaps__factory>;
    getContractFactory(
      name: "MockAuthorizerAdaptorEntrypoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAuthorizerAdaptorEntrypoint__factory>;
    getContractFactory(
      name: "MockComposableStablePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockComposableStablePool__factory>;
    getContractFactory(
      name: "MockComposableStablePoolProtocolFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockComposableStablePoolProtocolFees__factory>;
    getContractFactory(
      name: "MockComposableStablePoolRates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockComposableStablePoolRates__factory>;
    getContractFactory(
      name: "MockComposableStablePoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockComposableStablePoolStorage__factory>;
    getContractFactory(
      name: "MockStableMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStableMath__factory>;
    getContractFactory(
      name: "MockStablePoolAmplification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStablePoolAmplification__factory>;
    getContractFactory(
      name: "UserBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserBalance__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "VaultAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAuthorization__factory>;

    getContractAt(
      name: "IAuthorizerAdaptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizerAdaptor>;
    getContractAt(
      name: "IAuthorizerAdaptorEntrypoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizerAdaptorEntrypoint>;
    getContractAt(
      name: "IComposableStablePoolRates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComposableStablePoolRates>;
    getContractAt(
      name: "BasePoolUserData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolUserData>;
    getContractAt(
      name: "IBasePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePoolFactory>;
    getContractAt(
      name: "IControlledPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IControlledPool>;
    getContractAt(
      name: "IPoolVersion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolVersion>;
    getContractAt(
      name: "IProtocolFeeCache",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeeCache>;
    getContractAt(
      name: "IRateProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRateProvider>;
    getContractAt(
      name: "IRateProviderPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRateProviderPool>;
    getContractAt(
      name: "IRecoveryMode",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRecoveryMode>;
    getContractAt(
      name: "IAuthentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthentication>;
    getContractAt(
      name: "ISignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignaturesValidator>;
    getContractAt(
      name: "ITemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemporarilyPausable>;
    getContractAt(
      name: "IVersion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersion>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IProtocolFeePercentagesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeePercentagesProvider>;
    getContractAt(
      name: "IAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizer>;
    getContractAt(
      name: "IBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePool>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IGeneralPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGeneralPool>;
    getContractAt(
      name: "IMinimalSwapInfoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalSwapInfoPool>;
    getContractAt(
      name: "IProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeesCollector>;
    getContractAt(
      name: "ITimelockAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelockAuthorizer>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "BalancerPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerPoolToken>;
    getContractAt(
      name: "BaseGeneralPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGeneralPool>;
    getContractAt(
      name: "BasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePool>;
    getContractAt(
      name: "BasePoolAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolAuthorization>;
    getContractAt(
      name: "ProtocolFeeCache",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolFeeCache>;
    getContractAt(
      name: "BasePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolFactory>;
    getContractAt(
      name: "FactoryWidePauseWindow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryWidePauseWindow>;
    getContractAt(
      name: "RecoveryMode",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RecoveryMode>;
    getContractAt(
      name: "MockFailureModes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFailureModes>;
    getContractAt(
      name: "Authentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authentication>;
    getContractAt(
      name: "BaseSplitCodeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseSplitCodeFactory>;
    getContractAt(
      name: "EOASignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EOASignaturesValidator>;
    getContractAt(
      name: "ExtraCalldataEOASignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExtraCalldataEOASignaturesValidator>;
    getContractAt(
      name: "SingletonAuthentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingletonAuthentication>;
    getContractAt(
      name: "PausableConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableConstants>;
    getContractAt(
      name: "TemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TemporarilyPausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "AssetManagers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetManagers>;
    getContractAt(
      name: "AssetTransfersHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetTransfersHandler>;
    getContractAt(
      name: "TimelockAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockAuthorizer>;
    getContractAt(
      name: "TimelockAuthorizerManagement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockAuthorizerManagement>;
    getContractAt(
      name: "TimelockExecutionHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockExecutionHelper>;
    getContractAt(
      name: "MinimalSwapInfoPoolsBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalSwapInfoPoolsBalance>;
    getContractAt(
      name: "TwoTokenPoolsBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TwoTokenPoolsBalance>;
    getContractAt(
      name: "ComposableStablePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableStablePool>;
    getContractAt(
      name: "ComposableStablePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableStablePoolFactory>;
    getContractAt(
      name: "ComposableStablePoolProtocolFees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableStablePoolProtocolFees>;
    getContractAt(
      name: "ComposableStablePoolRates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableStablePoolRates>;
    getContractAt(
      name: "ComposableStablePoolStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableStablePoolStorage>;
    getContractAt(
      name: "Fees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Fees>;
    getContractAt(
      name: "FlashLoans",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoans>;
    getContractAt(
      name: "PoolBalances",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolBalances>;
    getContractAt(
      name: "PoolRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolRegistry>;
    getContractAt(
      name: "PoolTokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolTokens>;
    getContractAt(
      name: "ProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolFeesCollector>;
    getContractAt(
      name: "StablePoolAmplification",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StablePoolAmplification>;
    getContractAt(
      name: "Swaps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Swaps>;
    getContractAt(
      name: "MockAuthorizerAdaptorEntrypoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAuthorizerAdaptorEntrypoint>;
    getContractAt(
      name: "MockComposableStablePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockComposableStablePool>;
    getContractAt(
      name: "MockComposableStablePoolProtocolFees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockComposableStablePoolProtocolFees>;
    getContractAt(
      name: "MockComposableStablePoolRates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockComposableStablePoolRates>;
    getContractAt(
      name: "MockComposableStablePoolStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockComposableStablePoolStorage>;
    getContractAt(
      name: "MockStableMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStableMath>;
    getContractAt(
      name: "MockStablePoolAmplification",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStablePoolAmplification>;
    getContractAt(
      name: "UserBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserBalance>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "VaultAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultAuthorization>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
