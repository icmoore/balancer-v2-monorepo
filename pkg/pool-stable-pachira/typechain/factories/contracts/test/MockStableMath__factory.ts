/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../common";
import type {
  MockStableMath,
  MockStableMathInterface,
} from "../../../contracts/test/MockStableMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "bptInForExactTokensOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    name: "calculateInvariant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactTokensInForBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amplificationParameter",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
    ],
    name: "getTokenBalanceGivenInvariantAndAllOtherBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndexOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
    ],
    name: "inGivenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndexOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
    ],
    name: "outGivenIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "tokenInForExactBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611621806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063e382afe11161005b578063e382afe11461040f578063f3e92912146104b9578063fe2dd7ba14610568578063fff8e54e1461061d57610088565b806359d02e621461008d5780639cd91d3f14610160578063ab55d41214610215578063cc832ac9146102d6575b600080fd5b61014e600480360360e08110156100a357600080fd5b813591908101906040810160208201356401000000008111156100c557600080fd5b8201836020820111156100d757600080fd5b803590602001918460208302840111640100000000831117156100f957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060208101359060408101359060608101359060800135610756565b60408051918252519081900360200190f35b61014e600480360360a081101561017657600080fd5b8135919081019060408101602082013564010000000081111561019857600080fd5b8201836020820111156101aa57600080fd5b803590602001918460208302840111640100000000831117156101cc57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060208101359060400135610773565b61014e600480360360e081101561022b57600080fd5b8135919081019060408101602082013564010000000081111561024d57600080fd5b82018360208201111561025f57600080fd5b8035906020019184602083028401116401000000008311171561028157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060208101359060408101359060608101359060800135610796565b61014e600480360360c08110156102ec57600080fd5b8135919081019060408101602082013564010000000081111561030e57600080fd5b82018360208201111561032057600080fd5b8035906020019184602083028401116401000000008311171561034257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561039257600080fd5b8201836020820111156103a457600080fd5b803590602001918460208302840111640100000000831117156103c657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602081013590604001356107a7565b61014e6004803603604081101561042557600080fd5b8135919081019060408101602082013564010000000081111561044757600080fd5b82018360208201111561045957600080fd5b8035906020019184602083028401116401000000008311171561047b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107c2945050505050565b61014e600480360360808110156104cf57600080fd5b813591908101906040810160208201356401000000008111156104f157600080fd5b82018360208201111561050357600080fd5b8035906020019184602083028401116401000000008311171561052557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356107d7565b61014e600480360360a081101561057e57600080fd5b813591908101906040810160208201356401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460208302840111640100000000831117156105d457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602081013590604001356107f0565b61014e600480360360c081101561063357600080fd5b8135919081019060408101602082013564010000000081111561065557600080fd5b82018360208201111561066757600080fd5b8035906020019184602083028401116401000000008311171561068957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156106d957600080fd5b8201836020820111156106eb57600080fd5b8035906020019184602083028401116401000000008311171561070d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060208101359060400135610809565b600061076788888888888888610819565b98975050505050505050565b600061078c86868686866107878c8c61093b565b610a9d565b9695505050505050565b600061076788888888888888610b46565b60006107b7878787878787610bfd565b979650505050505050565b60006107ce838361093b565b90505b92915050565b60006107e585858585610ec4565b90505b949350505050565b600061078c86868686866108048c8c61093b565b61108c565b60006107b7878787878787611109565b60008061083a846108348761082e818b611373565b90611385565b906113dc565b9050600061084a8a8a848b610ec4565b905060006108748a8a8151811061085d57fe5b60200260200101518361141e90919063ffffffff16565b90506000805b8b518110156108b3576108a98c828151811061089257fe5b60200260200101518361137390919063ffffffff16565b915060010161087a565b5060006108dc828d8d815181106108c657fe5b602002602001015161143490919063ffffffff16565b905060006108e98261147d565b905060006108f785836113dc565b90506000610905868361141e565b905061092661091f83670de0b6b3a76400008d9003611385565b8290611373565b98505050505050505050979650505050505050565b80516000908190815b8181101561097c5761097285828151811061095b57fe5b60200260200101518461137390919063ffffffff16565b9250600101610944565b508161098d576000925050506107d1565b600082868302825b60ff811015610a86578260005b868110156109e3576109d96109b7838761148f565b6109d48c84815181106109c657fe5b60200260200101518a61148f565b6114a9565b91506001016109a2565b50839450610a3c610a1b610a156109fa848a61148f565b610a0f610a07888d61148f565b6103e86114a9565b90611373565b8661148f565b6109d4610a2b896001018561148f565b610a0f610a076103e889038a61148f565b935084841115610a6457600185850311610a5f57839750505050505050506107d1565b610a7d565b600184860311610a7d57839750505050505050506107d1565b50600101610995565b50610a926101416114c9565b505050505092915050565b6000610ac583878681518110610aaf57fe5b602002602001015161141e90919063ffffffff16565b868581518110610ad157fe5b6020026020010181815250506000610aeb88888589610ec4565b905083878681518110610afa57fe5b602002602001015101878681518110610b0f57fe5b6020026020010181815250506107676001610a0f898981518110610b2f57fe5b60200260200101518461141e90919063ffffffff16565b600080610b5b846108348761082e818b61141e565b90506000610b6b8a8a848b610ec4565b90506000610b7f828b8b81518110610aaf57fe5b90506000805b8b51811015610ba757610b9d8c828151811061089257fe5b9150600101610b85565b506000610bba828d8d815181106108c657fe5b90506000610bc78261147d565b90506000610bd585836113dc565b90506000610be3868361141e565b905061092661091f83670de0b6b3a76400008d90036114f6565b600080805b8751811015610c2457610c1a88828151811061089257fe5b9150600101610c02565b506060865167ffffffffffffffff81118015610c3f57600080fd5b50604051908082528060200260200182016040528015610c69578160200160208202803683370190505b5090506000805b8951811015610d36576000610c8b858c84815181106108c657fe5b9050610ce38b8381518110610c9c57fe5b6020026020010151610cdd8c8581518110610cb357fe5b60200260200101518e8681518110610cc757fe5b602002602001015161137390919063ffffffff16565b90611434565b848381518110610cef57fe5b602002602001018181525050610d2b610d2482868581518110610d0e57fe5b60200260200101516114f690919063ffffffff16565b8490611373565b925050600101610c70565b506060895167ffffffffffffffff81118015610d5157600080fd5b50604051908082528060200260200182016040528015610d7b578160200160208202803683370190505b50905060005b8a51811015610e4f57600083858381518110610d9957fe5b60200260200101511115610e08576000610dca610dbe86670de0b6b3a764000061141e565b8e8581518110610d0e57fe5b90506000610dde828e8681518110610aaf57fe5b9050610dff610df882670de0b6b3a76400008d90036114f6565b8390611373565b92505050610e1f565b8a8281518110610e1457fe5b602002602001015190505b610e2f818d8481518110610cc757fe5b838381518110610e3b57fe5b602090810291909101015250600101610d81565b506000610e5c8c8361093b565b90506000610e6a828a611434565b9050670de0b6b3a7640000811115610eb557610ea88a7ffffffffffffffffffffffffffffffffffffffffffffffffff21f494c589c000083016114f6565b965050505050505061078c565b6000965050505050505061078c565b600080845186029050600085600081518110610edc57fe5b602002602001015190506000865187600081518110610ef757fe5b60200260200101510290506000600190505b8751811015610f5d57610f42610f3c610f35848b8581518110610f2857fe5b602002602001015161148f565b8a5161148f565b886114a9565b9150610f5388828151811061095b57fe5b9250600101610f09565b50868581518110610f6a57fe5b6020026020010151820391506000610f82878861148f565b90506000610fb3610fa7610f9f84610f9a898861148f565b61151f565b6103e861148f565b8a8981518110610f2857fe5b90506000610fce610fc7610f9f8b896114a9565b8690611373565b9050600080610fea610fe08686611373565b610f9a8d86611373565b905060005b60ff8110156110705781925061102561100c86610a0f858661148f565b610f9a8e61101f88610a0f88600261148f565b9061141e565b91508282111561104e57600183830311611049575097506107e89650505050505050565b611068565b600182840311611068575097506107e89650505050505050565b600101610fef565b5061107c6101426114c9565b5050505050505050949350505050565b600061109e83878781518110610cc757fe5b8686815181106110aa57fe5b60200260200101818152505060006110c488888588610ec4565b9050838787815181106110d357fe5b6020026020010151038787815181106110e857fe5b602002602001018181525050610767600161101f838a8981518110610aaf57fe5b600080805b87518110156111305761112688828151811061089257fe5b915060010161110e565b506060865167ffffffffffffffff8111801561114b57600080fd5b50604051908082528060200260200182016040528015611175578160200160208202803683370190505b5090506000805b89518110156112355760006111ad858c848151811061119757fe5b602002602001015161138590919063ffffffff16565b90506111e98b83815181106111be57fe5b602002602001015161082e8c85815181106111d557fe5b60200260200101518e8681518110610aaf57fe5b8483815181106111f557fe5b60200260200101818152505061122a610d248286858151811061121457fe5b60200260200101516113dc90919063ffffffff16565b92505060010161117c565b506060895167ffffffffffffffff8111801561125057600080fd5b5060405190808252806020026020018201604052801561127a578160200160208202803683370190505b50905060005b8a5181101561133257600084828151811061129757fe5b60200260200101518411156112eb5760006112b4610dbe8661147d565b905060006112c8828e8681518110610aaf57fe5b90506112e2610df882670de0b6b3a76400008d9003611385565b92505050611302565b8a82815181106112f757fe5b602002602001015190505b611312818d8481518110610aaf57fe5b83838151811061131e57fe5b602090810291909101015250600101611280565b50600061133f8c8361093b565b9050600061134d828a611434565b905061136261135b8261147d565b8b906113dc565b9d9c50505050505050505050505050565b60008282016107ce848210158361155e565b6000611394821515600461155e565b670de0b6b3a764000083026113c68415806113bf5750670de0b6b3a76400008583816113bc57fe5b04145b600561155e565b6001836001830304018115150291505092915050565b60008282026114008415806113f95750838583816113f657fe5b04145b600361155e565b6001670de0b6b3a76400006001830304018115150291505092915050565b600061142e83831115600161155e565b50900390565b6000611443821515600461155e565b670de0b6b3a7640000830261146b8415806113bf5750670de0b6b3a76400008583816113bc57fe5b82818161147457fe5b04949350505050565b670de0b6b3a764000081810391100290565b60008282026107ce8415806113f95750838583816113f657fe5b60006114b8821515600461155e565b8183816114c157fe5b049392505050565b6114f3817f42414c0000000000000000000000000000000000000000000000000000000000611570565b50565b60008282026115108415806113f95750838583816113f657fe5b670de0b6b3a764000081611474565b600061152e821515600461155e565b508115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201046001010290565b8161156c5761156c816114c9565b5050565b7f08c379a000000000000000000000000000000000000000000000000000000000600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fdfea26469706673582212200a583167e16e0cd38649f76d488207320d61f48175d5650d861668729b36ea2c64736f6c63430007010033";

type MockStableMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStableMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStableMath__factory extends ContractFactory {
  constructor(...args: MockStableMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<MockStableMath> {
    return super.deploy(overrides || {}) as Promise<MockStableMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockStableMath {
    return super.attach(address) as MockStableMath;
  }
  override connect(signer: Signer): MockStableMath__factory {
    return super.connect(signer) as MockStableMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStableMathInterface {
    return new utils.Interface(_abi) as MockStableMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStableMath {
    return new Contract(address, _abi, signerOrProvider) as MockStableMath;
  }
}
