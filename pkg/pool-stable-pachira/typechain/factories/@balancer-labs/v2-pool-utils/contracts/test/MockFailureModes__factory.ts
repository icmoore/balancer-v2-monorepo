/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Contract, Signer, utils} from "ethers";
import type {Provider} from "@ethersproject/providers";
import type {
  MockFailureModes,
  MockFailureModesInterface,
} from "../../../../../@balancer-labs/v2-pool-utils/contracts/test/MockFailureModes";

const _abi = [
  {
    inputs: [
      {
        internalType: "enum MockFailureModes.FailureMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "errorCode",
        type: "uint256",
      },
    ],
    name: "setFailureCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum MockFailureModes.FailureMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "failed",
        type: "bool",
      },
    ],
    name: "setFailureMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class MockFailureModes__factory {
  static readonly abi = _abi;
  static createInterface(): MockFailureModesInterface {
    return new utils.Interface(_abi) as MockFailureModesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFailureModes {
    return new Contract(address, _abi, signerOrProvider) as MockFailureModes;
  }
}
