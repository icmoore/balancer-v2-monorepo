/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Contract, Signer, utils} from "ethers";
import type {Provider} from "@ethersproject/providers";
import type {
  IProtocolFeePercentagesProvider,
  IProtocolFeePercentagesProviderInterface,
} from "../../../../../@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "percentage",
        type: "uint256",
      },
    ],
    name: "ProtocolFeePercentageChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maximumPercentage",
        type: "uint256",
      },
    ],
    name: "ProtocolFeeTypeRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
    ],
    name: "getFeeTypeMaximumPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
    ],
    name: "getFeeTypeName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
    ],
    name: "getFeeTypePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
    ],
    name: "isValidFeeType",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "isValidFeeTypePercentage",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maximumValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "initialValue",
        type: "uint256",
      },
    ],
    name: "registerFeeType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "setFeeTypePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IProtocolFeePercentagesProvider__factory {
  static readonly abi = _abi;
  static createInterface(): IProtocolFeePercentagesProviderInterface {
    return new utils.Interface(
      _abi
    ) as IProtocolFeePercentagesProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IProtocolFeePercentagesProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IProtocolFeePercentagesProvider;
  }
}
