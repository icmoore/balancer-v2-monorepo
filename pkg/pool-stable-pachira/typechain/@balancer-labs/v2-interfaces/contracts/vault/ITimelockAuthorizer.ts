/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result, EventFragment} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ITimelockAuthorizer {
  export type ScheduledExecutionStruct = {
    where: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    executed: PromiseOrValue<boolean>;
    canceled: PromiseOrValue<boolean>;
    protected: PromiseOrValue<boolean>;
    executableAt: PromiseOrValue<BigNumberish>;
    scheduledBy: PromiseOrValue<string>;
    scheduledAt: PromiseOrValue<BigNumberish>;
    executedBy: PromiseOrValue<string>;
    executedAt: PromiseOrValue<BigNumberish>;
    canceledBy: PromiseOrValue<string>;
    canceledAt: PromiseOrValue<BigNumberish>;
  };

  export type ScheduledExecutionStructOutput = [
    string,
    string,
    boolean,
    boolean,
    boolean,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    where: string;
    data: string;
    executed: boolean;
    canceled: boolean;
    protected: boolean;
    executableAt: BigNumber;
    scheduledBy: string;
    scheduledAt: BigNumber;
    executedBy: string;
    executedAt: BigNumber;
    canceledBy: string;
    canceledAt: BigNumber;
  };
}

export interface ITimelockAuthorizerInterface extends utils.Interface {
  functions: {
    "EVERYWHERE()": FunctionFragment;
    "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()": FunctionFragment;
    "MAX_DELAY()": FunctionFragment;
    "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()": FunctionFragment;
    "addCanceler(uint256,address)": FunctionFragment;
    "addGranter(bytes32,address,address)": FunctionFragment;
    "addRevoker(address,address)": FunctionFragment;
    "canExecute(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "claimRoot()": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActionIdDelay(bytes32)": FunctionFragment;
    "getActionIdGrantDelay(bytes32)": FunctionFragment;
    "getActionIdRevokeDelay(bytes32)": FunctionFragment;
    "getPendingRoot()": FunctionFragment;
    "getRoot()": FunctionFragment;
    "getRootTransferDelay()": FunctionFragment;
    "getScheduledExecution(uint256)": FunctionFragment;
    "getScheduledExecutions(uint256,uint256,bool)": FunctionFragment;
    "getScheduledExecutionsCount()": FunctionFragment;
    "getTimelockExecutionHelper()": FunctionFragment;
    "getVault()": FunctionFragment;
    "grantPermission(bytes32,address,address)": FunctionFragment;
    "hasPermission(bytes32,address,address)": FunctionFragment;
    "isCanceler(uint256,address)": FunctionFragment;
    "isExecutor(uint256,address)": FunctionFragment;
    "isGranter(bytes32,address,address)": FunctionFragment;
    "isPendingRoot(address)": FunctionFragment;
    "isPermissionGrantedOnTarget(bytes32,address,address)": FunctionFragment;
    "isRevoker(address,address)": FunctionFragment;
    "isRoot(address)": FunctionFragment;
    "removeCanceler(uint256,address)": FunctionFragment;
    "removeGranter(bytes32,address,address)": FunctionFragment;
    "removeRevoker(address,address)": FunctionFragment;
    "renouncePermission(bytes32,address)": FunctionFragment;
    "revokePermission(bytes32,address,address)": FunctionFragment;
    "schedule(address,bytes,address[])": FunctionFragment;
    "scheduleDelayChange(bytes32,uint256,address[])": FunctionFragment;
    "scheduleGrantDelayChange(bytes32,uint256,address[])": FunctionFragment;
    "scheduleGrantPermission(bytes32,address,address,address[])": FunctionFragment;
    "scheduleRevokeDelayChange(bytes32,uint256,address[])": FunctionFragment;
    "scheduleRevokePermission(bytes32,address,address,address[])": FunctionFragment;
    "scheduleRootChange(address,address[])": FunctionFragment;
    "setDelay(bytes32,uint256)": FunctionFragment;
    "setGrantDelay(bytes32,uint256)": FunctionFragment;
    "setPendingRoot(address)": FunctionFragment;
    "setRevokeDelay(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EVERYWHERE"
      | "EVERYWHERE()"
      | "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID"
      | "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()"
      | "MAX_DELAY"
      | "MAX_DELAY()"
      | "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY"
      | "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()"
      | "addCanceler"
      | "addCanceler(uint256,address)"
      | "addGranter"
      | "addGranter(bytes32,address,address)"
      | "addRevoker"
      | "addRevoker(address,address)"
      | "canExecute"
      | "canExecute(uint256)"
      | "cancel"
      | "cancel(uint256)"
      | "claimRoot"
      | "claimRoot()"
      | "execute"
      | "execute(uint256)"
      | "getActionIdDelay"
      | "getActionIdDelay(bytes32)"
      | "getActionIdGrantDelay"
      | "getActionIdGrantDelay(bytes32)"
      | "getActionIdRevokeDelay"
      | "getActionIdRevokeDelay(bytes32)"
      | "getPendingRoot"
      | "getPendingRoot()"
      | "getRoot"
      | "getRoot()"
      | "getRootTransferDelay"
      | "getRootTransferDelay()"
      | "getScheduledExecution"
      | "getScheduledExecution(uint256)"
      | "getScheduledExecutions"
      | "getScheduledExecutions(uint256,uint256,bool)"
      | "getScheduledExecutionsCount"
      | "getScheduledExecutionsCount()"
      | "getTimelockExecutionHelper"
      | "getTimelockExecutionHelper()"
      | "getVault"
      | "getVault()"
      | "grantPermission"
      | "grantPermission(bytes32,address,address)"
      | "hasPermission"
      | "hasPermission(bytes32,address,address)"
      | "isCanceler"
      | "isCanceler(uint256,address)"
      | "isExecutor"
      | "isExecutor(uint256,address)"
      | "isGranter"
      | "isGranter(bytes32,address,address)"
      | "isPendingRoot"
      | "isPendingRoot(address)"
      | "isPermissionGrantedOnTarget"
      | "isPermissionGrantedOnTarget(bytes32,address,address)"
      | "isRevoker"
      | "isRevoker(address,address)"
      | "isRoot"
      | "isRoot(address)"
      | "removeCanceler"
      | "removeCanceler(uint256,address)"
      | "removeGranter"
      | "removeGranter(bytes32,address,address)"
      | "removeRevoker"
      | "removeRevoker(address,address)"
      | "renouncePermission"
      | "renouncePermission(bytes32,address)"
      | "revokePermission"
      | "revokePermission(bytes32,address,address)"
      | "schedule"
      | "schedule(address,bytes,address[])"
      | "scheduleDelayChange"
      | "scheduleDelayChange(bytes32,uint256,address[])"
      | "scheduleGrantDelayChange"
      | "scheduleGrantDelayChange(bytes32,uint256,address[])"
      | "scheduleGrantPermission"
      | "scheduleGrantPermission(bytes32,address,address,address[])"
      | "scheduleRevokeDelayChange"
      | "scheduleRevokeDelayChange(bytes32,uint256,address[])"
      | "scheduleRevokePermission"
      | "scheduleRevokePermission(bytes32,address,address,address[])"
      | "scheduleRootChange"
      | "scheduleRootChange(address,address[])"
      | "setDelay"
      | "setDelay(bytes32,uint256)"
      | "setGrantDelay"
      | "setGrantDelay(bytes32,uint256)"
      | "setPendingRoot"
      | "setPendingRoot(address)"
      | "setRevokeDelay"
      | "setRevokeDelay(bytes32,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EVERYWHERE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVERYWHERE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_DELAY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCanceler",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addCanceler(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addGranter",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addGranter(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevoker",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevoker(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claimRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRoot()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionIdDelay",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionIdDelay(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionIdGrantDelay",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionIdGrantDelay(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionIdRevokeDelay",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionIdRevokeDelay(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRoot()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRoot()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRootTransferDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRootTransferDelay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledExecution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledExecution(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledExecutions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledExecutions(uint256,uint256,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledExecutionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledExecutionsCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimelockExecutionHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimelockExecutionHelper()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVault()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermission",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermission(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isCanceler",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCanceler(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExecutor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExecutor(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranter",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranter(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPendingRoot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPendingRoot(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionGrantedOnTarget",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionGrantedOnTarget(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevoker",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevoker(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoot(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCanceler",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCanceler(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGranter",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGranter(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRevoker",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRevoker(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePermission",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePermission(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule(address,bytes,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleDelayChange",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleDelayChange(bytes32,uint256,address[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleGrantDelayChange",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleGrantDelayChange(bytes32,uint256,address[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleGrantPermission",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleGrantPermission(bytes32,address,address,address[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRevokeDelayChange",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRevokeDelayChange(bytes32,uint256,address[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRevokePermission",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRevokePermission(bytes32,address,address,address[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRootChange",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleRootChange(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrantDelay",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrantDelay(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingRoot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingRoot(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevokeDelay",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevokeDelay(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "EVERYWHERE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EVERYWHERE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DELAY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCanceler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCanceler(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGranter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addGranter(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRevoker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRevoker(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canExecute(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancel(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRoot()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execute(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionIdDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionIdDelay(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionIdGrantDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionIdGrantDelay(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionIdRevokeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionIdRevokeDelay(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRoot()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoot()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRootTransferDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootTransferDelay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledExecution(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledExecutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledExecutions(uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledExecutionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledExecutionsCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelockExecutionHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelockExecutionHelper()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermission(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCanceler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCanceler(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExecutor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExecutor(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGranter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGranter(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPendingRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPendingRoot(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionGrantedOnTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionGrantedOnTarget(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevoker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRevoker(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRoot(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCanceler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCanceler(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGranter(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRevoker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRevoker(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePermission(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "schedule(address,bytes,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleDelayChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleDelayChange(bytes32,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleGrantDelayChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleGrantDelayChange(bytes32,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleGrantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleGrantPermission(bytes32,address,address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRevokeDelayChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRevokeDelayChange(bytes32,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRevokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRevokePermission(bytes32,address,address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRootChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleRootChange(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelay(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGrantDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGrantDelay(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingRoot(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevokeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevokeDelay(bytes32,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ActionDelaySet(bytes32,uint256)": EventFragment;
    "CancelerAdded(uint256,address)": EventFragment;
    "CancelerRemoved(uint256,address)": EventFragment;
    "DelayChangeScheduled(bytes32,uint256,uint256)": EventFragment;
    "ExecutionCanceled(uint256)": EventFragment;
    "ExecutionExecuted(uint256)": EventFragment;
    "ExecutionScheduled(bytes32,uint256)": EventFragment;
    "ExecutorAdded(uint256,address)": EventFragment;
    "GrantDelayChangeScheduled(bytes32,uint256,uint256)": EventFragment;
    "GrantDelaySet(bytes32,uint256)": EventFragment;
    "GrantPermissionScheduled(bytes32,address,address,uint256)": EventFragment;
    "GranterAdded(bytes32,address,address)": EventFragment;
    "GranterRemoved(bytes32,address,address)": EventFragment;
    "PendingRootSet(address)": EventFragment;
    "PermissionGranted(bytes32,address,address)": EventFragment;
    "PermissionRevoked(bytes32,address,address)": EventFragment;
    "RevokeDelayChangeScheduled(bytes32,uint256,uint256)": EventFragment;
    "RevokeDelaySet(bytes32,uint256)": EventFragment;
    "RevokePermissionScheduled(bytes32,address,address,uint256)": EventFragment;
    "RevokerAdded(address,address)": EventFragment;
    "RevokerRemoved(address,address)": EventFragment;
    "RootChangeScheduled(address,uint256)": EventFragment;
    "RootSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionDelaySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ActionDelaySet(bytes32,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelerAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CancelerAdded(uint256,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelerRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CancelerRemoved(uint256,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayChangeScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelayChangeScheduled(bytes32,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionCanceled(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionExecuted(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExecutionScheduled(bytes32,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExecutorAdded(uint256,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantDelayChangeScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GrantDelayChangeScheduled(bytes32,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantDelaySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GrantDelaySet(bytes32,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantPermissionScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GrantPermissionScheduled(bytes32,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GranterAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GranterAdded(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GranterRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GranterRemoved(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingRootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingRootSet(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PermissionGranted(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PermissionRevoked(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeDelayChangeScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokeDelayChangeScheduled(bytes32,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeDelaySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokeDelaySet(bytes32,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePermissionScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokePermissionScheduled(bytes32,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokerAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokerAdded(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokerRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokerRemoved(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootChangeScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RootChangeScheduled(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootSet(address)"): EventFragment;
}

export interface ActionDelaySetEventObject {
  actionId: string;
  delay: BigNumber;
}
export type ActionDelaySetEvent = TypedEvent<
  [string, BigNumber],
  ActionDelaySetEventObject
>;

export type ActionDelaySetEventFilter = TypedEventFilter<ActionDelaySetEvent>;

export interface CancelerAddedEventObject {
  scheduledExecutionId: BigNumber;
  canceler: string;
}
export type CancelerAddedEvent = TypedEvent<
  [BigNumber, string],
  CancelerAddedEventObject
>;

export type CancelerAddedEventFilter = TypedEventFilter<CancelerAddedEvent>;

export interface CancelerRemovedEventObject {
  scheduledExecutionId: BigNumber;
  canceler: string;
}
export type CancelerRemovedEvent = TypedEvent<
  [BigNumber, string],
  CancelerRemovedEventObject
>;

export type CancelerRemovedEventFilter = TypedEventFilter<CancelerRemovedEvent>;

export interface DelayChangeScheduledEventObject {
  actionId: string;
  newDelay: BigNumber;
  scheduledExecutionId: BigNumber;
}
export type DelayChangeScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelayChangeScheduledEventObject
>;

export type DelayChangeScheduledEventFilter =
  TypedEventFilter<DelayChangeScheduledEvent>;

export interface ExecutionCanceledEventObject {
  scheduledExecutionId: BigNumber;
}
export type ExecutionCanceledEvent = TypedEvent<
  [BigNumber],
  ExecutionCanceledEventObject
>;

export type ExecutionCanceledEventFilter =
  TypedEventFilter<ExecutionCanceledEvent>;

export interface ExecutionExecutedEventObject {
  scheduledExecutionId: BigNumber;
}
export type ExecutionExecutedEvent = TypedEvent<
  [BigNumber],
  ExecutionExecutedEventObject
>;

export type ExecutionExecutedEventFilter =
  TypedEventFilter<ExecutionExecutedEvent>;

export interface ExecutionScheduledEventObject {
  actionId: string;
  scheduledExecutionId: BigNumber;
}
export type ExecutionScheduledEvent = TypedEvent<
  [string, BigNumber],
  ExecutionScheduledEventObject
>;

export type ExecutionScheduledEventFilter =
  TypedEventFilter<ExecutionScheduledEvent>;

export interface ExecutorAddedEventObject {
  scheduledExecutionId: BigNumber;
  executor: string;
}
export type ExecutorAddedEvent = TypedEvent<
  [BigNumber, string],
  ExecutorAddedEventObject
>;

export type ExecutorAddedEventFilter = TypedEventFilter<ExecutorAddedEvent>;

export interface GrantDelayChangeScheduledEventObject {
  actionId: string;
  newDelay: BigNumber;
  scheduledExecutionId: BigNumber;
}
export type GrantDelayChangeScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GrantDelayChangeScheduledEventObject
>;

export type GrantDelayChangeScheduledEventFilter =
  TypedEventFilter<GrantDelayChangeScheduledEvent>;

export interface GrantDelaySetEventObject {
  actionId: string;
  delay: BigNumber;
}
export type GrantDelaySetEvent = TypedEvent<
  [string, BigNumber],
  GrantDelaySetEventObject
>;

export type GrantDelaySetEventFilter = TypedEventFilter<GrantDelaySetEvent>;

export interface GrantPermissionScheduledEventObject {
  actionId: string;
  account: string;
  where: string;
  scheduledExecutionId: BigNumber;
}
export type GrantPermissionScheduledEvent = TypedEvent<
  [string, string, string, BigNumber],
  GrantPermissionScheduledEventObject
>;

export type GrantPermissionScheduledEventFilter =
  TypedEventFilter<GrantPermissionScheduledEvent>;

export interface GranterAddedEventObject {
  actionId: string;
  account: string;
  where: string;
}
export type GranterAddedEvent = TypedEvent<
  [string, string, string],
  GranterAddedEventObject
>;

export type GranterAddedEventFilter = TypedEventFilter<GranterAddedEvent>;

export interface GranterRemovedEventObject {
  actionId: string;
  account: string;
  where: string;
}
export type GranterRemovedEvent = TypedEvent<
  [string, string, string],
  GranterRemovedEventObject
>;

export type GranterRemovedEventFilter = TypedEventFilter<GranterRemovedEvent>;

export interface PendingRootSetEventObject {
  pendingRoot: string;
}
export type PendingRootSetEvent = TypedEvent<
  [string],
  PendingRootSetEventObject
>;

export type PendingRootSetEventFilter = TypedEventFilter<PendingRootSetEvent>;

export interface PermissionGrantedEventObject {
  actionId: string;
  account: string;
  where: string;
}
export type PermissionGrantedEvent = TypedEvent<
  [string, string, string],
  PermissionGrantedEventObject
>;

export type PermissionGrantedEventFilter =
  TypedEventFilter<PermissionGrantedEvent>;

export interface PermissionRevokedEventObject {
  actionId: string;
  account: string;
  where: string;
}
export type PermissionRevokedEvent = TypedEvent<
  [string, string, string],
  PermissionRevokedEventObject
>;

export type PermissionRevokedEventFilter =
  TypedEventFilter<PermissionRevokedEvent>;

export interface RevokeDelayChangeScheduledEventObject {
  actionId: string;
  newDelay: BigNumber;
  scheduledExecutionId: BigNumber;
}
export type RevokeDelayChangeScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RevokeDelayChangeScheduledEventObject
>;

export type RevokeDelayChangeScheduledEventFilter =
  TypedEventFilter<RevokeDelayChangeScheduledEvent>;

export interface RevokeDelaySetEventObject {
  actionId: string;
  delay: BigNumber;
}
export type RevokeDelaySetEvent = TypedEvent<
  [string, BigNumber],
  RevokeDelaySetEventObject
>;

export type RevokeDelaySetEventFilter = TypedEventFilter<RevokeDelaySetEvent>;

export interface RevokePermissionScheduledEventObject {
  actionId: string;
  account: string;
  where: string;
  scheduledExecutionId: BigNumber;
}
export type RevokePermissionScheduledEvent = TypedEvent<
  [string, string, string, BigNumber],
  RevokePermissionScheduledEventObject
>;

export type RevokePermissionScheduledEventFilter =
  TypedEventFilter<RevokePermissionScheduledEvent>;

export interface RevokerAddedEventObject {
  account: string;
  where: string;
}
export type RevokerAddedEvent = TypedEvent<
  [string, string],
  RevokerAddedEventObject
>;

export type RevokerAddedEventFilter = TypedEventFilter<RevokerAddedEvent>;

export interface RevokerRemovedEventObject {
  account: string;
  where: string;
}
export type RevokerRemovedEvent = TypedEvent<
  [string, string],
  RevokerRemovedEventObject
>;

export type RevokerRemovedEventFilter = TypedEventFilter<RevokerRemovedEvent>;

export interface RootChangeScheduledEventObject {
  newRoot: string;
  scheduledExecutionId: BigNumber;
}
export type RootChangeScheduledEvent = TypedEvent<
  [string, BigNumber],
  RootChangeScheduledEventObject
>;

export type RootChangeScheduledEventFilter =
  TypedEventFilter<RootChangeScheduledEvent>;

export interface RootSetEventObject {
  root: string;
}
export type RootSetEvent = TypedEvent<[string], RootSetEventObject>;

export type RootSetEventFilter = TypedEventFilter<RootSetEvent>;

export interface ITimelockAuthorizer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITimelockAuthorizerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EVERYWHERE(overrides?: CallOverrides): Promise<[string]>;

    "EVERYWHERE()"(overrides?: CallOverrides): Promise<[string]>;

    GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_DELAY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_CHANGE_DELAY_EXECUTION_DELAY(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "addCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    addGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "addGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    addRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "addRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    canExecute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canExecute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancel(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    claimRoot(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "claimRoot()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    execute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    getActionIdDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getActionIdDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActionIdGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getActionIdGrantDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActionIdRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getActionIdRevokeDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRoot(overrides?: CallOverrides): Promise<[string]>;

    "getPendingRoot()"(overrides?: CallOverrides): Promise<[string]>;

    getRoot(overrides?: CallOverrides): Promise<[string]>;

    "getRoot()"(overrides?: CallOverrides): Promise<[string]>;

    getRootTransferDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRootTransferDelay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getScheduledExecution(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ITimelockAuthorizer.ScheduledExecutionStructOutput]>;

    "getScheduledExecution(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ITimelockAuthorizer.ScheduledExecutionStructOutput]>;

    getScheduledExecutions(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [ITimelockAuthorizer.ScheduledExecutionStructOutput[]] & {
        items: ITimelockAuthorizer.ScheduledExecutionStructOutput[];
      }
    >;

    "getScheduledExecutions(uint256,uint256,bool)"(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [ITimelockAuthorizer.ScheduledExecutionStructOutput[]] & {
        items: ITimelockAuthorizer.ScheduledExecutionStructOutput[];
      }
    >;

    getScheduledExecutionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getScheduledExecutionsCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimelockExecutionHelper(overrides?: CallOverrides): Promise<[string]>;

    "getTimelockExecutionHelper()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    "getVault()"(overrides?: CallOverrides): Promise<[string]>;

    grantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "grantPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    hasPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExecutor(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isExecutor(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPendingRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPendingRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPermissionGrantedOnTarget(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPermissionGrantedOnTarget(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "removeCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    removeGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "removeGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    removeRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "removeRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    renouncePermission(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "renouncePermission(bytes32,address)"(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    revokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "revokePermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    schedule(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "schedule(address,bytes,address[])"(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    scheduleDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "scheduleDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    scheduleGrantDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "scheduleGrantDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    scheduleGrantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "scheduleGrantPermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    scheduleRevokeDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "scheduleRevokeDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    scheduleRevokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "scheduleRevokePermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    scheduleRootChange(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "scheduleRootChange(address,address[])"(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setGrantDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setPendingRoot(
      pendingRoot: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setPendingRoot(address)"(
      pendingRoot: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setRevokeDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;
  };

  EVERYWHERE(overrides?: CallOverrides): Promise<string>;

  "EVERYWHERE()"(overrides?: CallOverrides): Promise<string>;

  GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_CHANGE_DELAY_EXECUTION_DELAY(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addCanceler(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "addCanceler(uint256,address)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  addGranter(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "addGranter(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  addRevoker(
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "addRevoker(address,address)"(
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  canExecute(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canExecute(uint256)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancel(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  claimRoot(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "claimRoot()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  execute(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  getActionIdDelay(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getActionIdDelay(bytes32)"(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActionIdGrantDelay(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getActionIdGrantDelay(bytes32)"(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActionIdRevokeDelay(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getActionIdRevokeDelay(bytes32)"(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRoot(overrides?: CallOverrides): Promise<string>;

  "getPendingRoot()"(overrides?: CallOverrides): Promise<string>;

  getRoot(overrides?: CallOverrides): Promise<string>;

  "getRoot()"(overrides?: CallOverrides): Promise<string>;

  getRootTransferDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "getRootTransferDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  getScheduledExecution(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput>;

  "getScheduledExecution(uint256)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput>;

  getScheduledExecutions(
    skip: PromiseOrValue<BigNumberish>,
    maxSize: PromiseOrValue<BigNumberish>,
    reverseOrder: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput[]>;

  "getScheduledExecutions(uint256,uint256,bool)"(
    skip: PromiseOrValue<BigNumberish>,
    maxSize: PromiseOrValue<BigNumberish>,
    reverseOrder: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput[]>;

  getScheduledExecutionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getScheduledExecutionsCount()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimelockExecutionHelper(overrides?: CallOverrides): Promise<string>;

  "getTimelockExecutionHelper()"(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "getVault()"(overrides?: CallOverrides): Promise<string>;

  grantPermission(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "grantPermission(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  hasPermission(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPermission(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCanceler(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCanceler(uint256,address)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExecutor(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExecutor(uint256,address)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGranter(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGranter(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPendingRoot(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPendingRoot(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPermissionGrantedOnTarget(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPermissionGrantedOnTarget(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRevoker(
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRevoker(address,address)"(
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRoot(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRoot(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeCanceler(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "removeCanceler(uint256,address)"(
    scheduledExecutionId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  removeGranter(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "removeGranter(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  removeRevoker(
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "removeRevoker(address,address)"(
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  renouncePermission(
    actionId: PromiseOrValue<BytesLike>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "renouncePermission(bytes32,address)"(
    actionId: PromiseOrValue<BytesLike>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  revokePermission(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "revokePermission(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  schedule(
    where: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "schedule(address,bytes,address[])"(
    where: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  scheduleDelayChange(
    actionId: PromiseOrValue<BytesLike>,
    newDelay: PromiseOrValue<BigNumberish>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "scheduleDelayChange(bytes32,uint256,address[])"(
    actionId: PromiseOrValue<BytesLike>,
    newDelay: PromiseOrValue<BigNumberish>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  scheduleGrantDelayChange(
    actionId: PromiseOrValue<BytesLike>,
    newDelay: PromiseOrValue<BigNumberish>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "scheduleGrantDelayChange(bytes32,uint256,address[])"(
    actionId: PromiseOrValue<BytesLike>,
    newDelay: PromiseOrValue<BigNumberish>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  scheduleGrantPermission(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "scheduleGrantPermission(bytes32,address,address,address[])"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  scheduleRevokeDelayChange(
    actionId: PromiseOrValue<BytesLike>,
    newDelay: PromiseOrValue<BigNumberish>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "scheduleRevokeDelayChange(bytes32,uint256,address[])"(
    actionId: PromiseOrValue<BytesLike>,
    newDelay: PromiseOrValue<BigNumberish>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  scheduleRevokePermission(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "scheduleRevokePermission(bytes32,address,address,address[])"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  scheduleRootChange(
    newRoot: PromiseOrValue<string>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "scheduleRootChange(address,address[])"(
    newRoot: PromiseOrValue<string>,
    executors: PromiseOrValue<string>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setDelay(
    actionId: PromiseOrValue<BytesLike>,
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setDelay(bytes32,uint256)"(
    actionId: PromiseOrValue<BytesLike>,
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setGrantDelay(
    actionId: PromiseOrValue<BytesLike>,
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setGrantDelay(bytes32,uint256)"(
    actionId: PromiseOrValue<BytesLike>,
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setPendingRoot(
    pendingRoot: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setPendingRoot(address)"(
    pendingRoot: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setRevokeDelay(
    actionId: PromiseOrValue<BytesLike>,
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setRevokeDelay(bytes32,uint256)"(
    actionId: PromiseOrValue<BytesLike>,
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    EVERYWHERE(overrides?: CallOverrides): Promise<string>;

    "EVERYWHERE()"(overrides?: CallOverrides): Promise<string>;

    GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_CHANGE_DELAY_EXECUTION_DELAY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    canExecute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canExecute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancel(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancel(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoot(overrides?: CallOverrides): Promise<void>;

    "claimRoot()"(overrides?: CallOverrides): Promise<void>;

    execute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "execute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getActionIdDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionIdDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionIdGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionIdGrantDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionIdRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionIdRevokeDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRoot(overrides?: CallOverrides): Promise<string>;

    "getPendingRoot()"(overrides?: CallOverrides): Promise<string>;

    getRoot(overrides?: CallOverrides): Promise<string>;

    "getRoot()"(overrides?: CallOverrides): Promise<string>;

    getRootTransferDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "getRootTransferDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    getScheduledExecution(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput>;

    "getScheduledExecution(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput>;

    getScheduledExecutions(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput[]>;

    "getScheduledExecutions(uint256,uint256,bool)"(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<ITimelockAuthorizer.ScheduledExecutionStructOutput[]>;

    getScheduledExecutionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getScheduledExecutionsCount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelockExecutionHelper(overrides?: CallOverrides): Promise<string>;

    "getTimelockExecutionHelper()"(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "getVault()"(overrides?: CallOverrides): Promise<string>;

    grantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExecutor(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExecutor(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPendingRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPendingRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPermissionGrantedOnTarget(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPermissionGrantedOnTarget(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renouncePermission(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "renouncePermission(bytes32,address)"(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokePermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    schedule(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "schedule(address,bytes,address[])"(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scheduleDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleGrantDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scheduleGrantDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleGrantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scheduleGrantPermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleRevokeDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scheduleRevokeDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleRevokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scheduleRevokePermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleRootChange(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scheduleRootChange(address,address[])"(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGrantDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingRoot(
      pendingRoot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingRoot(address)"(
      pendingRoot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRevokeDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActionDelaySet(bytes32,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      delay?: null
    ): ActionDelaySetEventFilter;
    ActionDelaySet(
      actionId?: PromiseOrValue<BytesLike> | null,
      delay?: null
    ): ActionDelaySetEventFilter;

    "CancelerAdded(uint256,address)"(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null,
      canceler?: PromiseOrValue<string> | null
    ): CancelerAddedEventFilter;
    CancelerAdded(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null,
      canceler?: PromiseOrValue<string> | null
    ): CancelerAddedEventFilter;

    "CancelerRemoved(uint256,address)"(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null,
      canceler?: PromiseOrValue<string> | null
    ): CancelerRemovedEventFilter;
    CancelerRemoved(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null,
      canceler?: PromiseOrValue<string> | null
    ): CancelerRemovedEventFilter;

    "DelayChangeScheduled(bytes32,uint256,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      newDelay?: PromiseOrValue<BigNumberish> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): DelayChangeScheduledEventFilter;
    DelayChangeScheduled(
      actionId?: PromiseOrValue<BytesLike> | null,
      newDelay?: PromiseOrValue<BigNumberish> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): DelayChangeScheduledEventFilter;

    "ExecutionCanceled(uint256)"(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionCanceledEventFilter;
    ExecutionCanceled(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionCanceledEventFilter;

    "ExecutionExecuted(uint256)"(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionExecutedEventFilter;
    ExecutionExecuted(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionExecutedEventFilter;

    "ExecutionScheduled(bytes32,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionScheduledEventFilter;
    ExecutionScheduled(
      actionId?: PromiseOrValue<BytesLike> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionScheduledEventFilter;

    "ExecutorAdded(uint256,address)"(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null
    ): ExecutorAddedEventFilter;
    ExecutorAdded(
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null
    ): ExecutorAddedEventFilter;

    "GrantDelayChangeScheduled(bytes32,uint256,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      newDelay?: PromiseOrValue<BigNumberish> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): GrantDelayChangeScheduledEventFilter;
    GrantDelayChangeScheduled(
      actionId?: PromiseOrValue<BytesLike> | null,
      newDelay?: PromiseOrValue<BigNumberish> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): GrantDelayChangeScheduledEventFilter;

    "GrantDelaySet(bytes32,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      delay?: null
    ): GrantDelaySetEventFilter;
    GrantDelaySet(
      actionId?: PromiseOrValue<BytesLike> | null,
      delay?: null
    ): GrantDelaySetEventFilter;

    "GrantPermissionScheduled(bytes32,address,address,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null,
      scheduledExecutionId?: null
    ): GrantPermissionScheduledEventFilter;
    GrantPermissionScheduled(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null,
      scheduledExecutionId?: null
    ): GrantPermissionScheduledEventFilter;

    "GranterAdded(bytes32,address,address)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): GranterAddedEventFilter;
    GranterAdded(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): GranterAddedEventFilter;

    "GranterRemoved(bytes32,address,address)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): GranterRemovedEventFilter;
    GranterRemoved(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): GranterRemovedEventFilter;

    "PendingRootSet(address)"(
      pendingRoot?: PromiseOrValue<string> | null
    ): PendingRootSetEventFilter;
    PendingRootSet(
      pendingRoot?: PromiseOrValue<string> | null
    ): PendingRootSetEventFilter;

    "PermissionGranted(bytes32,address,address)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): PermissionGrantedEventFilter;
    PermissionGranted(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): PermissionGrantedEventFilter;

    "PermissionRevoked(bytes32,address,address)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): PermissionRevokedEventFilter;
    PermissionRevoked(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): PermissionRevokedEventFilter;

    "RevokeDelayChangeScheduled(bytes32,uint256,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      newDelay?: PromiseOrValue<BigNumberish> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): RevokeDelayChangeScheduledEventFilter;
    RevokeDelayChangeScheduled(
      actionId?: PromiseOrValue<BytesLike> | null,
      newDelay?: PromiseOrValue<BigNumberish> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): RevokeDelayChangeScheduledEventFilter;

    "RevokeDelaySet(bytes32,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      delay?: null
    ): RevokeDelaySetEventFilter;
    RevokeDelaySet(
      actionId?: PromiseOrValue<BytesLike> | null,
      delay?: null
    ): RevokeDelaySetEventFilter;

    "RevokePermissionScheduled(bytes32,address,address,uint256)"(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null,
      scheduledExecutionId?: null
    ): RevokePermissionScheduledEventFilter;
    RevokePermissionScheduled(
      actionId?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null,
      scheduledExecutionId?: null
    ): RevokePermissionScheduledEventFilter;

    "RevokerAdded(address,address)"(
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): RevokerAddedEventFilter;
    RevokerAdded(
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): RevokerAddedEventFilter;

    "RevokerRemoved(address,address)"(
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): RevokerRemovedEventFilter;
    RevokerRemoved(
      account?: PromiseOrValue<string> | null,
      where?: PromiseOrValue<string> | null
    ): RevokerRemovedEventFilter;

    "RootChangeScheduled(address,uint256)"(
      newRoot?: PromiseOrValue<string> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): RootChangeScheduledEventFilter;
    RootChangeScheduled(
      newRoot?: PromiseOrValue<string> | null,
      scheduledExecutionId?: PromiseOrValue<BigNumberish> | null
    ): RootChangeScheduledEventFilter;

    "RootSet(address)"(
      root?: PromiseOrValue<string> | null
    ): RootSetEventFilter;
    RootSet(root?: PromiseOrValue<string> | null): RootSetEventFilter;
  };

  estimateGas: {
    EVERYWHERE(overrides?: CallOverrides): Promise<BigNumber>;

    "EVERYWHERE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_CHANGE_DELAY_EXECUTION_DELAY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "addCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    addGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "addGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    addRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "addRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    canExecute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canExecute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "cancel(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    claimRoot(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "claimRoot()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    execute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "execute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    getActionIdDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionIdDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionIdGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionIdGrantDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionIdRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionIdRevokeDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "getRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRootTransferDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "getRootTransferDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    getScheduledExecution(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getScheduledExecution(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduledExecutions(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getScheduledExecutions(uint256,uint256,bool)"(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduledExecutionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getScheduledExecutionsCount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelockExecutionHelper(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimelockExecutionHelper()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "grantPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    hasPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExecutor(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExecutor(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPendingRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPendingRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPermissionGrantedOnTarget(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPermissionGrantedOnTarget(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "removeCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    removeGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "removeGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    removeRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "removeRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    renouncePermission(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "renouncePermission(bytes32,address)"(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    revokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "revokePermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    schedule(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "schedule(address,bytes,address[])"(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    scheduleDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "scheduleDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    scheduleGrantDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "scheduleGrantDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    scheduleGrantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "scheduleGrantPermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    scheduleRevokeDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "scheduleRevokeDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    scheduleRevokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "scheduleRevokePermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    scheduleRootChange(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "scheduleRootChange(address,address[])"(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setGrantDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setPendingRoot(
      pendingRoot: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setPendingRoot(address)"(
      pendingRoot: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setRevokeDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EVERYWHERE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EVERYWHERE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GLOBAL_CANCELER_SCHEDULED_EXECUTION_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_CHANGE_DELAY_EXECUTION_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINIMUM_CHANGE_DELAY_EXECUTION_DELAY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "addCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    addGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "addGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    addRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "addRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    canExecute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canExecute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    claimRoot(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "claimRoot()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    execute(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    getActionIdDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActionIdDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActionIdGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActionIdGrantDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActionIdRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActionIdRevokeDelay(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPendingRoot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRootTransferDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRootTransferDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduledExecution(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getScheduledExecution(uint256)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduledExecutions(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getScheduledExecutions(uint256,uint256,bool)"(
      skip: PromiseOrValue<BigNumberish>,
      maxSize: PromiseOrValue<BigNumberish>,
      reverseOrder: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduledExecutionsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getScheduledExecutionsCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimelockExecutionHelper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimelockExecutionHelper()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "grantPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    hasPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExecutor(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExecutor(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPendingRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPendingRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPermissionGrantedOnTarget(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPermissionGrantedOnTarget(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRoot(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRoot(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCanceler(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "removeCanceler(uint256,address)"(
      scheduledExecutionId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    removeGranter(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "removeGranter(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    removeRevoker(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "removeRevoker(address,address)"(
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    renouncePermission(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "renouncePermission(bytes32,address)"(
      actionId: PromiseOrValue<BytesLike>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    revokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "revokePermission(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    schedule(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "schedule(address,bytes,address[])"(
      where: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    scheduleDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "scheduleDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    scheduleGrantDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "scheduleGrantDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    scheduleGrantPermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "scheduleGrantPermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    scheduleRevokeDelayChange(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "scheduleRevokeDelayChange(bytes32,uint256,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      newDelay: PromiseOrValue<BigNumberish>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    scheduleRevokePermission(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "scheduleRevokePermission(bytes32,address,address,address[])"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    scheduleRootChange(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "scheduleRootChange(address,address[])"(
      newRoot: PromiseOrValue<string>,
      executors: PromiseOrValue<string>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setGrantDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setGrantDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setPendingRoot(
      pendingRoot: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setPendingRoot(address)"(
      pendingRoot: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setRevokeDelay(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setRevokeDelay(bytes32,uint256)"(
      actionId: PromiseOrValue<BytesLike>,
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;
  };
}
