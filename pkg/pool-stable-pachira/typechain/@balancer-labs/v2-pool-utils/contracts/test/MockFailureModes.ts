/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface MockFailureModesInterface extends utils.Interface {
  functions: {
    "setFailureCode(uint8,uint256)": FunctionFragment;
    "setFailureMode(uint8,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setFailureCode"
      | "setFailureCode(uint8,uint256)"
      | "setFailureMode"
      | "setFailureMode(uint8,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setFailureCode",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailureCode(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailureMode",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFailureMode(uint8,bool)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setFailureCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailureCode(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailureMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFailureMode(uint8,bool)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockFailureModes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockFailureModesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setFailureCode(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setFailureCode(uint8,uint256)"(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setFailureMode(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setFailureMode(uint8,bool)"(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;
  };

  setFailureCode(
    mode: PromiseOrValue<BigNumberish>,
    errorCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setFailureCode(uint8,uint256)"(
    mode: PromiseOrValue<BigNumberish>,
    errorCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setFailureMode(
    mode: PromiseOrValue<BigNumberish>,
    failed: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setFailureMode(uint8,bool)"(
    mode: PromiseOrValue<BigNumberish>,
    failed: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    setFailureCode(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFailureCode(uint8,uint256)"(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFailureMode(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFailureMode(uint8,bool)"(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setFailureCode(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setFailureCode(uint8,uint256)"(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setFailureMode(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setFailureMode(uint8,bool)"(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setFailureCode(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setFailureCode(uint8,uint256)"(
      mode: PromiseOrValue<BigNumberish>,
      errorCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setFailureMode(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setFailureMode(uint8,bool)"(
      mode: PromiseOrValue<BigNumberish>,
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;
  };
}
