/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result, EventFragment} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ManagedPool {
  export type ManagedPoolParamsStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    assetManagers: PromiseOrValue<string>[];
  };

  export type ManagedPoolParamsStructOutput = [string, string, string[]] & {
    name: string;
    symbol: string;
    assetManagers: string[];
  };

  export type ManagedPoolConfigParamsStruct = {
    vault: PromiseOrValue<string>;
    protocolFeeProvider: PromiseOrValue<string>;
    weightedMath: PromiseOrValue<string>;
    recoveryModeHelper: PromiseOrValue<string>;
    pauseWindowDuration: PromiseOrValue<BigNumberish>;
    bufferPeriodDuration: PromiseOrValue<BigNumberish>;
    version: PromiseOrValue<string>;
  };

  export type ManagedPoolConfigParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    vault: string;
    protocolFeeProvider: string;
    weightedMath: string;
    recoveryModeHelper: string;
    pauseWindowDuration: BigNumber;
    bufferPeriodDuration: BigNumber;
    version: string;
  };
}

export declare namespace ManagedPoolSettings {
  export type ManagedPoolSettingsParamsStruct = {
    tokens: PromiseOrValue<string>[];
    normalizedWeights: PromiseOrValue<BigNumberish>[];
    swapFeePercentage: PromiseOrValue<BigNumberish>;
    swapEnabledOnStart: PromiseOrValue<boolean>;
    mustAllowlistLPs: PromiseOrValue<boolean>;
    managementAumFeePercentage: PromiseOrValue<BigNumberish>;
    aumFeeId: PromiseOrValue<BigNumberish>;
  };

  export type ManagedPoolSettingsParamsStructOutput = [
    string[],
    BigNumber[],
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    tokens: string[];
    normalizedWeights: BigNumber[];
    swapFeePercentage: BigNumber;
    swapEnabledOnStart: boolean;
    mustAllowlistLPs: boolean;
    managementAumFeePercentage: BigNumber;
    aumFeeId: BigNumber;
  };
}

export declare namespace IPoolSwapStructs {
  export type SwapRequestStruct = {
    kind: PromiseOrValue<BigNumberish>;
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<BytesLike>;
    lastChangeBlock: PromiseOrValue<BigNumberish>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type SwapRequestStructOutput = [
    number,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string
  ] & {
    kind: number;
    tokenIn: string;
    tokenOut: string;
    amount: BigNumber;
    poolId: string;
    lastChangeBlock: BigNumber;
    from: string;
    to: string;
    userData: string;
  };
}

export interface MockManagedPoolInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "addAllowedAddress(address)": FunctionFragment;
    "addToken(address,address,uint256,uint256,address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "collectAumManagementFees()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "disableRecoveryMode()": FunctionFragment;
    "enableRecoveryMode()": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getActualSupply()": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getCircuitBreakerState(address)": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getGradualSwapFeeUpdateParams()": FunctionFragment;
    "getGradualWeightUpdateParams()": FunctionFragment;
    "getJoinExitEnabled()": FunctionFragment;
    "getManagementAumFeeParams()": FunctionFragment;
    "getMustAllowlistLPs()": FunctionFragment;
    "getNextNonce(address)": FunctionFragment;
    "getNormalizedWeights()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPausedState()": FunctionFragment;
    "getPoolId()": FunctionFragment;
    "getProtocolFeePercentageCache(uint256)": FunctionFragment;
    "getProtocolFeesCollector()": FunctionFragment;
    "getProviderFeeId(uint256)": FunctionFragment;
    "getScalingFactors()": FunctionFragment;
    "getSwapEnabled()": FunctionFragment;
    "getSwapFeePercentage()": FunctionFragment;
    "getVault()": FunctionFragment;
    "getVirtualSupply()": FunctionFragment;
    "inRecoveryMode()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isAddressOnAllowlist(address)": FunctionFragment;
    "isOwnerOnlyAction(bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)": FunctionFragment;
    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "removeAllowedAddress(address)": FunctionFragment;
    "removeToken(address,uint256,address)": FunctionFragment;
    "setCircuitBreakers(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "setJoinExitEnabled(bool)": FunctionFragment;
    "setManagementAumFeePercentage(uint256)": FunctionFragment;
    "setMustAllowlistLPs(bool)": FunctionFragment;
    "setSwapEnabled(bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateProtocolFeePercentageCache()": FunctionFragment;
    "updateSwapFeeGradually(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateWeightsGradually(uint256,uint256,address[],uint256[])": FunctionFragment;
    "validateSwapFeePercentage(uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "addAllowedAddress"
      | "addAllowedAddress(address)"
      | "addToken"
      | "addToken(address,address,uint256,uint256,address)"
      | "allowance"
      | "allowance(address,address)"
      | "approve"
      | "approve(address,uint256)"
      | "balanceOf"
      | "balanceOf(address)"
      | "collectAumManagementFees"
      | "collectAumManagementFees()"
      | "decimals"
      | "decimals()"
      | "decreaseAllowance"
      | "decreaseAllowance(address,uint256)"
      | "disableRecoveryMode"
      | "disableRecoveryMode()"
      | "enableRecoveryMode"
      | "enableRecoveryMode()"
      | "getActionId"
      | "getActionId(bytes4)"
      | "getActualSupply"
      | "getActualSupply()"
      | "getAuthorizer"
      | "getAuthorizer()"
      | "getCircuitBreakerState"
      | "getCircuitBreakerState(address)"
      | "getDomainSeparator"
      | "getDomainSeparator()"
      | "getGradualSwapFeeUpdateParams"
      | "getGradualSwapFeeUpdateParams()"
      | "getGradualWeightUpdateParams"
      | "getGradualWeightUpdateParams()"
      | "getJoinExitEnabled"
      | "getJoinExitEnabled()"
      | "getManagementAumFeeParams"
      | "getManagementAumFeeParams()"
      | "getMustAllowlistLPs"
      | "getMustAllowlistLPs()"
      | "getNextNonce"
      | "getNextNonce(address)"
      | "getNormalizedWeights"
      | "getNormalizedWeights()"
      | "getOwner"
      | "getOwner()"
      | "getPausedState"
      | "getPausedState()"
      | "getPoolId"
      | "getPoolId()"
      | "getProtocolFeePercentageCache"
      | "getProtocolFeePercentageCache(uint256)"
      | "getProtocolFeesCollector"
      | "getProtocolFeesCollector()"
      | "getProviderFeeId"
      | "getProviderFeeId(uint256)"
      | "getScalingFactors"
      | "getScalingFactors()"
      | "getSwapEnabled"
      | "getSwapEnabled()"
      | "getSwapFeePercentage"
      | "getSwapFeePercentage()"
      | "getVault"
      | "getVault()"
      | "getVirtualSupply"
      | "getVirtualSupply()"
      | "inRecoveryMode"
      | "inRecoveryMode()"
      | "increaseAllowance"
      | "increaseAllowance(address,uint256)"
      | "isAddressOnAllowlist"
      | "isAddressOnAllowlist(address)"
      | "isOwnerOnlyAction"
      | "isOwnerOnlyAction(bytes32)"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "onExitPool"
      | "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"
      | "onJoinPool"
      | "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"
      | "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)"
      | "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"
      | "pause"
      | "pause()"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "queryExit"
      | "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"
      | "queryJoin"
      | "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)"
      | "removeAllowedAddress"
      | "removeAllowedAddress(address)"
      | "removeToken"
      | "removeToken(address,uint256,address)"
      | "setCircuitBreakers"
      | "setCircuitBreakers(address[],uint256[],uint256[],uint256[])"
      | "setJoinExitEnabled"
      | "setJoinExitEnabled(bool)"
      | "setManagementAumFeePercentage"
      | "setManagementAumFeePercentage(uint256)"
      | "setMustAllowlistLPs"
      | "setMustAllowlistLPs(bool)"
      | "setSwapEnabled"
      | "setSwapEnabled(bool)"
      | "symbol"
      | "symbol()"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "unpause"
      | "unpause()"
      | "updateProtocolFeePercentageCache"
      | "updateProtocolFeePercentageCache()"
      | "updateSwapFeeGradually"
      | "updateSwapFeeGradually(uint256,uint256,uint256,uint256)"
      | "updateWeightsGradually"
      | "updateWeightsGradually(uint256,uint256,address[],uint256[])"
      | "validateSwapFeePercentage"
      | "validateSwapFeePercentage(uint256)"
      | "version"
      | "version()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken(address,address,uint256,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAumManagementFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectAumManagementFees()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableRecoveryMode()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRecoveryMode()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActualSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCircuitBreakerState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCircuitBreakerState(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGradualSwapFeeUpdateParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGradualSwapFeeUpdateParams()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGradualWeightUpdateParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGradualWeightUpdateParams()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJoinExitEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJoinExitEnabled()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagementAumFeeParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagementAumFeeParams()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMustAllowlistLPs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMustAllowlistLPs()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeights()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPausedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPausedState()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeePercentageCache",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeePercentageCache(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeesCollector()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderFeeId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderFeeId(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScalingFactors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScalingFactors()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapEnabled()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVault()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inRecoveryMode()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressOnAllowlist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressOnAllowlist(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOnlyAction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOnlyAction(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onExitPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onJoinPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)",
    values: [
      IPoolSwapStructs.SwapRequestStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)",
    values: [
      IPoolSwapStructs.SwapRequestStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken(address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreakers",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreakers(address[],uint256[],uint256[],uint256[])",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setJoinExitEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setJoinExitEnabled(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementAumFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementAumFeePercentage(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMustAllowlistLPs",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMustAllowlistLPs(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeePercentageCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeePercentageCache()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapFeeGradually",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapFeeGradually(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually(uint256,uint256,address[],uint256[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSwapFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSwapFeePercentage(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "version()", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToken(address,address,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAumManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAumManagementFees()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRecoveryMode()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRecoveryMode()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitBreakerState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitBreakerState(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGradualSwapFeeUpdateParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGradualSwapFeeUpdateParams()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGradualWeightUpdateParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGradualWeightUpdateParams()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJoinExitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJoinExitEnabled()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagementAumFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagementAumFeeParams()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMustAllowlistLPs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMustAllowlistLPs()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeights()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPausedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPausedState()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeePercentageCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeePercentageCache(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeesCollector()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderFeeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderFeeId(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactors()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapEnabled()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inRecoveryMode()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressOnAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressOnAllowlist(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOnlyAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOnlyAction(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onExitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onJoinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryJoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreakers(address[],uint256[],uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJoinExitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJoinExitEnabled(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementAumFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementAumFeePercentage(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMustAllowlistLPs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMustAllowlistLPs(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeePercentageCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeePercentageCache()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapFeeGradually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapFeeGradually(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually(uint256,uint256,address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSwapFeePercentage(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version()", data: BytesLike): Result;

  events: {
    "AllowlistAddressAdded(address)": EventFragment;
    "AllowlistAddressRemoved(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CircuitBreakerSet(address,uint256,uint256,uint256)": EventFragment;
    "GradualSwapFeeUpdateScheduled(uint256,uint256,uint256,uint256)": EventFragment;
    "GradualWeightUpdateScheduled(uint256,uint256,uint256[],uint256[])": EventFragment;
    "JoinExitEnabledSet(bool)": EventFragment;
    "ManagementAumFeeCollected(uint256)": EventFragment;
    "ManagementAumFeePercentageChanged(uint256)": EventFragment;
    "MustAllowlistLPsSet(bool)": EventFragment;
    "PausedStateChanged(bool)": EventFragment;
    "ProtocolFeePercentageCacheUpdated(bytes32)": EventFragment;
    "RecoveryModeStateChanged(bool)": EventFragment;
    "SwapEnabledSet(bool)": EventFragment;
    "TokenAdded(address,uint256)": EventFragment;
    "TokenRemoved(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowlistAddressAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AllowlistAddressAdded(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowlistAddressRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AllowlistAddressRemoved(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircuitBreakerSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CircuitBreakerSet(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GradualSwapFeeUpdateScheduled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GradualSwapFeeUpdateScheduled(uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GradualWeightUpdateScheduled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GradualWeightUpdateScheduled(uint256,uint256,uint256[],uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinExitEnabledSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinExitEnabledSet(bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementAumFeeCollected"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ManagementAumFeeCollected(uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ManagementAumFeePercentageChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ManagementAumFeePercentageChanged(uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MustAllowlistLPsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MustAllowlistLPsSet(bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedStateChanged(bool)"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeePercentageCacheUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeePercentageCacheUpdated(bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeStateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RecoveryModeStateChanged(bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapEnabledSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapEnabledSet(bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenAdded(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
}

export interface AllowlistAddressAddedEventObject {
  member: string;
}
export type AllowlistAddressAddedEvent = TypedEvent<
  [string],
  AllowlistAddressAddedEventObject
>;

export type AllowlistAddressAddedEventFilter =
  TypedEventFilter<AllowlistAddressAddedEvent>;

export interface AllowlistAddressRemovedEventObject {
  member: string;
}
export type AllowlistAddressRemovedEvent = TypedEvent<
  [string],
  AllowlistAddressRemovedEventObject
>;

export type AllowlistAddressRemovedEventFilter =
  TypedEventFilter<AllowlistAddressRemovedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CircuitBreakerSetEventObject {
  token: string;
  bptPrice: BigNumber;
  lowerBoundPercentage: BigNumber;
  upperBoundPercentage: BigNumber;
}
export type CircuitBreakerSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  CircuitBreakerSetEventObject
>;

export type CircuitBreakerSetEventFilter =
  TypedEventFilter<CircuitBreakerSetEvent>;

export interface GradualSwapFeeUpdateScheduledEventObject {
  startTime: BigNumber;
  endTime: BigNumber;
  startSwapFeePercentage: BigNumber;
  endSwapFeePercentage: BigNumber;
}
export type GradualSwapFeeUpdateScheduledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  GradualSwapFeeUpdateScheduledEventObject
>;

export type GradualSwapFeeUpdateScheduledEventFilter =
  TypedEventFilter<GradualSwapFeeUpdateScheduledEvent>;

export interface GradualWeightUpdateScheduledEventObject {
  startTime: BigNumber;
  endTime: BigNumber;
  startWeights: BigNumber[];
  endWeights: BigNumber[];
}
export type GradualWeightUpdateScheduledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[], BigNumber[]],
  GradualWeightUpdateScheduledEventObject
>;

export type GradualWeightUpdateScheduledEventFilter =
  TypedEventFilter<GradualWeightUpdateScheduledEvent>;

export interface JoinExitEnabledSetEventObject {
  joinExitEnabled: boolean;
}
export type JoinExitEnabledSetEvent = TypedEvent<
  [boolean],
  JoinExitEnabledSetEventObject
>;

export type JoinExitEnabledSetEventFilter =
  TypedEventFilter<JoinExitEnabledSetEvent>;

export interface ManagementAumFeeCollectedEventObject {
  bptAmount: BigNumber;
}
export type ManagementAumFeeCollectedEvent = TypedEvent<
  [BigNumber],
  ManagementAumFeeCollectedEventObject
>;

export type ManagementAumFeeCollectedEventFilter =
  TypedEventFilter<ManagementAumFeeCollectedEvent>;

export interface ManagementAumFeePercentageChangedEventObject {
  managementAumFeePercentage: BigNumber;
}
export type ManagementAumFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  ManagementAumFeePercentageChangedEventObject
>;

export type ManagementAumFeePercentageChangedEventFilter =
  TypedEventFilter<ManagementAumFeePercentageChangedEvent>;

export interface MustAllowlistLPsSetEventObject {
  mustAllowlistLPs: boolean;
}
export type MustAllowlistLPsSetEvent = TypedEvent<
  [boolean],
  MustAllowlistLPsSetEventObject
>;

export type MustAllowlistLPsSetEventFilter =
  TypedEventFilter<MustAllowlistLPsSetEvent>;

export interface PausedStateChangedEventObject {
  paused: boolean;
}
export type PausedStateChangedEvent = TypedEvent<
  [boolean],
  PausedStateChangedEventObject
>;

export type PausedStateChangedEventFilter =
  TypedEventFilter<PausedStateChangedEvent>;

export interface ProtocolFeePercentageCacheUpdatedEventObject {
  feeCache: string;
}
export type ProtocolFeePercentageCacheUpdatedEvent = TypedEvent<
  [string],
  ProtocolFeePercentageCacheUpdatedEventObject
>;

export type ProtocolFeePercentageCacheUpdatedEventFilter =
  TypedEventFilter<ProtocolFeePercentageCacheUpdatedEvent>;

export interface RecoveryModeStateChangedEventObject {
  enabled: boolean;
}
export type RecoveryModeStateChangedEvent = TypedEvent<
  [boolean],
  RecoveryModeStateChangedEventObject
>;

export type RecoveryModeStateChangedEventFilter =
  TypedEventFilter<RecoveryModeStateChangedEvent>;

export interface SwapEnabledSetEventObject {
  swapEnabled: boolean;
}
export type SwapEnabledSetEvent = TypedEvent<
  [boolean],
  SwapEnabledSetEventObject
>;

export type SwapEnabledSetEventFilter = TypedEventFilter<SwapEnabledSetEvent>;

export interface TokenAddedEventObject {
  token: string;
  normalizedWeight: BigNumber;
}
export type TokenAddedEvent = TypedEvent<
  [string, BigNumber],
  TokenAddedEventObject
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface TokenRemovedEventObject {
  token: string;
}
export type TokenRemovedEvent = TypedEvent<[string], TokenRemovedEventObject>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MockManagedPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockManagedPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    addAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "addAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    addToken(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "addToken(address,address,uint256,uint256,address)"(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectAumManagementFees(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "collectAumManagementFees()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    disableRecoveryMode(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "disableRecoveryMode()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    enableRecoveryMode(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "enableRecoveryMode()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getActionId(bytes4)"(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getActualSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getActualSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<[string]>;

    getCircuitBreakerState(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        referenceWeight: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
        lowerBptPriceBound: BigNumber;
        upperBptPriceBound: BigNumber;
      }
    >;

    "getCircuitBreakerState(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        referenceWeight: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
        lowerBptPriceBound: BigNumber;
        upperBptPriceBound: BigNumber;
      }
    >;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "getDomainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    getGradualSwapFeeUpdateParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startSwapFeePercentage: BigNumber;
        endSwapFeePercentage: BigNumber;
      }
    >;

    "getGradualSwapFeeUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startSwapFeePercentage: BigNumber;
        endSwapFeePercentage: BigNumber;
      }
    >;

    getGradualWeightUpdateParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    "getGradualWeightUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    getJoinExitEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "getJoinExitEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    getManagementAumFeeParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        aumFeePercentage: BigNumber;
        lastCollectionTimestamp: BigNumber;
      }
    >;

    "getManagementAumFeeParams()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        aumFeePercentage: BigNumber;
        lastCollectionTimestamp: BigNumber;
      }
    >;

    getMustAllowlistLPs(overrides?: CallOverrides): Promise<[boolean]>;

    "getMustAllowlistLPs()"(overrides?: CallOverrides): Promise<[boolean]>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNextNonce(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNormalizedWeights(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getNormalizedWeights()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getPausedState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    "getPausedState()"(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<[string]>;

    "getPoolId()"(overrides?: CallOverrides): Promise<[string]>;

    getProtocolFeePercentageCache(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getProtocolFeePercentageCache(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<[string]>;

    "getProtocolFeesCollector()"(overrides?: CallOverrides): Promise<[string]>;

    getProviderFeeId(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getProviderFeeId(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getScalingFactors(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getScalingFactors()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSwapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "getSwapEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    "getVault()"(overrides?: CallOverrides): Promise<[string]>;

    getVirtualSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVirtualSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    inRecoveryMode(overrides?: CallOverrides): Promise<[boolean]>;

    "inRecoveryMode()"(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    isAddressOnAllowlist(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAddressOnAllowlist(address)"(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwnerOnlyAction(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOwnerOnlyAction(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    queryExit(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    queryJoin(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    removeAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "removeAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    removeToken(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "removeToken(address,uint256,address)"(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setCircuitBreakers(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setCircuitBreakers(address[],uint256[],uint256[],uint256[])"(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setJoinExitEnabled(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setJoinExitEnabled(bool)"(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setManagementAumFeePercentage(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setManagementAumFeePercentage(uint256)"(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setMustAllowlistLPs(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setMustAllowlistLPs(bool)"(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setSwapEnabled(bool)"(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    updateProtocolFeePercentageCache(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "updateProtocolFeePercentageCache()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    updateSwapFeeGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "updateSwapFeeGradually(uint256,uint256,uint256,uint256)"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "updateWeightsGradually(uint256,uint256,address[],uint256[])"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    validateSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "validateSwapFeePercentage(uint256)"(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  addAllowedAddress(
    member: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "addAllowedAddress(address)"(
    member: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  addToken(
    tokenToAdd: PromiseOrValue<string>,
    assetManager: PromiseOrValue<string>,
    tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
    mintAmount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "addToken(address,address,uint256,uint256,address)"(
    tokenToAdd: PromiseOrValue<string>,
    assetManager: PromiseOrValue<string>,
    tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
    mintAmount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectAumManagementFees(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "collectAumManagementFees()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  disableRecoveryMode(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "disableRecoveryMode()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  enableRecoveryMode(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "enableRecoveryMode()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  getActionId(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getActionId(bytes4)"(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getActualSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  "getAuthorizer()"(overrides?: CallOverrides): Promise<string>;

  getCircuitBreakerState(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bptPrice: BigNumber;
      referenceWeight: BigNumber;
      lowerBound: BigNumber;
      upperBound: BigNumber;
      lowerBptPriceBound: BigNumber;
      upperBptPriceBound: BigNumber;
    }
  >;

  "getCircuitBreakerState(address)"(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bptPrice: BigNumber;
      referenceWeight: BigNumber;
      lowerBound: BigNumber;
      upperBound: BigNumber;
      lowerBptPriceBound: BigNumber;
      upperBptPriceBound: BigNumber;
    }
  >;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  "getDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

  getGradualSwapFeeUpdateParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      startSwapFeePercentage: BigNumber;
      endSwapFeePercentage: BigNumber;
    }
  >;

  "getGradualSwapFeeUpdateParams()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      startSwapFeePercentage: BigNumber;
      endSwapFeePercentage: BigNumber;
    }
  >;

  getGradualWeightUpdateParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
      startTime: BigNumber;
      endTime: BigNumber;
      startWeights: BigNumber[];
      endWeights: BigNumber[];
    }
  >;

  "getGradualWeightUpdateParams()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
      startTime: BigNumber;
      endTime: BigNumber;
      startWeights: BigNumber[];
      endWeights: BigNumber[];
    }
  >;

  getJoinExitEnabled(overrides?: CallOverrides): Promise<boolean>;

  "getJoinExitEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  getManagementAumFeeParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      aumFeePercentage: BigNumber;
      lastCollectionTimestamp: BigNumber;
    }
  >;

  "getManagementAumFeeParams()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      aumFeePercentage: BigNumber;
      lastCollectionTimestamp: BigNumber;
    }
  >;

  getMustAllowlistLPs(overrides?: CallOverrides): Promise<boolean>;

  "getMustAllowlistLPs()"(overrides?: CallOverrides): Promise<boolean>;

  getNextNonce(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNextNonce(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNormalizedWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getNormalizedWeights()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getPausedState(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      paused: boolean;
      pauseWindowEndTime: BigNumber;
      bufferPeriodEndTime: BigNumber;
    }
  >;

  "getPausedState()"(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      paused: boolean;
      pauseWindowEndTime: BigNumber;
      bufferPeriodEndTime: BigNumber;
    }
  >;

  getPoolId(overrides?: CallOverrides): Promise<string>;

  "getPoolId()"(overrides?: CallOverrides): Promise<string>;

  getProtocolFeePercentageCache(
    feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProtocolFeePercentageCache(uint256)"(
    feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocolFeesCollector(overrides?: CallOverrides): Promise<string>;

  "getProtocolFeesCollector()"(overrides?: CallOverrides): Promise<string>;

  getProviderFeeId(
    feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProviderFeeId(uint256)"(
    feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getScalingFactors()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

  "getSwapEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "getVault()"(overrides?: CallOverrides): Promise<string>;

  getVirtualSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getVirtualSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  inRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

  "inRecoveryMode()"(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  isAddressOnAllowlist(
    member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAddressOnAllowlist(address)"(
    member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwnerOnlyAction(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOwnerOnlyAction(bytes32)"(
    actionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onExitPool(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  onJoinPool(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)"(
    request: IPoolSwapStructs.SwapRequestStruct,
    balances: PromiseOrValue<BigNumberish>[],
    indexIn: PromiseOrValue<BigNumberish>,
    indexOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"(
    request: IPoolSwapStructs.SwapRequestStruct,
    balanceTokenIn: PromiseOrValue<BigNumberish>,
    balanceTokenOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  queryExit(
    arg0: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
    arg0: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  queryJoin(
    arg0: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
    arg0: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  removeAllowedAddress(
    member: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "removeAllowedAddress(address)"(
    member: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  removeToken(
    tokenToRemove: PromiseOrValue<string>,
    burnAmount: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "removeToken(address,uint256,address)"(
    tokenToRemove: PromiseOrValue<string>,
    burnAmount: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setCircuitBreakers(
    tokens: PromiseOrValue<string>[],
    bptPrices: PromiseOrValue<BigNumberish>[],
    lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
    upperBoundPercentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setCircuitBreakers(address[],uint256[],uint256[],uint256[])"(
    tokens: PromiseOrValue<string>[],
    bptPrices: PromiseOrValue<BigNumberish>[],
    lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
    upperBoundPercentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setJoinExitEnabled(
    joinExitEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setJoinExitEnabled(bool)"(
    joinExitEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setManagementAumFeePercentage(
    managementAumFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setManagementAumFeePercentage(uint256)"(
    managementAumFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setMustAllowlistLPs(
    mustAllowlistLPs: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setMustAllowlistLPs(bool)"(
    mustAllowlistLPs: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setSwapEnabled(
    swapEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setSwapEnabled(bool)"(
    swapEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  updateProtocolFeePercentageCache(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "updateProtocolFeePercentageCache()"(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  updateSwapFeeGradually(
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    startSwapFeePercentage: PromiseOrValue<BigNumberish>,
    endSwapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "updateSwapFeeGradually(uint256,uint256,uint256,uint256)"(
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    startSwapFeePercentage: PromiseOrValue<BigNumberish>,
    endSwapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    tokens: PromiseOrValue<string>[],
    endWeights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "updateWeightsGradually(uint256,uint256,address[],uint256[])"(
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    tokens: PromiseOrValue<string>[],
    endWeights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  validateSwapFeePercentage(
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "validateSwapFeePercentage(uint256)"(
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    addAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addToken(address,address,uint256,uint256,address)"(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectAumManagementFees(overrides?: CallOverrides): Promise<BigNumber>;

    "collectAumManagementFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disableRecoveryMode(overrides?: CallOverrides): Promise<void>;

    "disableRecoveryMode()"(overrides?: CallOverrides): Promise<void>;

    enableRecoveryMode(overrides?: CallOverrides): Promise<void>;

    "enableRecoveryMode()"(overrides?: CallOverrides): Promise<void>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getActionId(bytes4)"(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getActualSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<string>;

    getCircuitBreakerState(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        referenceWeight: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
        lowerBptPriceBound: BigNumber;
        upperBptPriceBound: BigNumber;
      }
    >;

    "getCircuitBreakerState(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        referenceWeight: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
        lowerBptPriceBound: BigNumber;
        upperBptPriceBound: BigNumber;
      }
    >;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    "getDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

    getGradualSwapFeeUpdateParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startSwapFeePercentage: BigNumber;
        endSwapFeePercentage: BigNumber;
      }
    >;

    "getGradualSwapFeeUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startSwapFeePercentage: BigNumber;
        endSwapFeePercentage: BigNumber;
      }
    >;

    getGradualWeightUpdateParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    "getGradualWeightUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    getJoinExitEnabled(overrides?: CallOverrides): Promise<boolean>;

    "getJoinExitEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    getManagementAumFeeParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        aumFeePercentage: BigNumber;
        lastCollectionTimestamp: BigNumber;
      }
    >;

    "getManagementAumFeeParams()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        aumFeePercentage: BigNumber;
        lastCollectionTimestamp: BigNumber;
      }
    >;

    getMustAllowlistLPs(overrides?: CallOverrides): Promise<boolean>;

    "getMustAllowlistLPs()"(overrides?: CallOverrides): Promise<boolean>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextNonce(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNormalizedWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getNormalizedWeights()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getPausedState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    "getPausedState()"(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<string>;

    "getPoolId()"(overrides?: CallOverrides): Promise<string>;

    getProtocolFeePercentageCache(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProtocolFeePercentageCache(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<string>;

    "getProtocolFeesCollector()"(overrides?: CallOverrides): Promise<string>;

    getProviderFeeId(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderFeeId(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getScalingFactors()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

    "getSwapEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "getVault()"(overrides?: CallOverrides): Promise<string>;

    getVirtualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getVirtualSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    inRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

    "inRecoveryMode()"(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAddressOnAllowlist(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAddressOnAllowlist(address)"(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwnerOnlyAction(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOwnerOnlyAction(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsOut: BigNumber[];
        dueProtocolFees: BigNumber[];
      }
    >;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsOut: BigNumber[];
        dueProtocolFees: BigNumber[];
      }
    >;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsIn: BigNumber[];
        dueProtocolFees: BigNumber[];
      }
    >;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsIn: BigNumber[];
        dueProtocolFees: BigNumber[];
      }
    >;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    queryExit(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptIn: BigNumber; amountsOut: BigNumber[]}
    >;

    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptIn: BigNumber; amountsOut: BigNumber[]}
    >;

    queryJoin(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptOut: BigNumber; amountsIn: BigNumber[]}
    >;

    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {bptOut: BigNumber; amountsIn: BigNumber[]}
    >;

    removeAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeToken(address,uint256,address)"(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCircuitBreakers(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setCircuitBreakers(address[],uint256[],uint256[],uint256[])"(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setJoinExitEnabled(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setJoinExitEnabled(bool)"(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementAumFeePercentage(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setManagementAumFeePercentage(uint256)"(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMustAllowlistLPs(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMustAllowlistLPs(bool)"(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwapEnabled(bool)"(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateProtocolFeePercentageCache(overrides?: CallOverrides): Promise<void>;

    "updateProtocolFeePercentageCache()"(
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapFeeGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSwapFeeGradually(uint256,uint256,uint256,uint256)"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeightsGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWeightsGradually(uint256,uint256,address[],uint256[])"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    validateSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateSwapFeePercentage(uint256)"(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AllowlistAddressAdded(address)"(
      member?: PromiseOrValue<string> | null
    ): AllowlistAddressAddedEventFilter;
    AllowlistAddressAdded(
      member?: PromiseOrValue<string> | null
    ): AllowlistAddressAddedEventFilter;

    "AllowlistAddressRemoved(address)"(
      member?: PromiseOrValue<string> | null
    ): AllowlistAddressRemovedEventFilter;
    AllowlistAddressRemoved(
      member?: PromiseOrValue<string> | null
    ): AllowlistAddressRemovedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "CircuitBreakerSet(address,uint256,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      bptPrice?: null,
      lowerBoundPercentage?: null,
      upperBoundPercentage?: null
    ): CircuitBreakerSetEventFilter;
    CircuitBreakerSet(
      token?: PromiseOrValue<string> | null,
      bptPrice?: null,
      lowerBoundPercentage?: null,
      upperBoundPercentage?: null
    ): CircuitBreakerSetEventFilter;

    "GradualSwapFeeUpdateScheduled(uint256,uint256,uint256,uint256)"(
      startTime?: null,
      endTime?: null,
      startSwapFeePercentage?: null,
      endSwapFeePercentage?: null
    ): GradualSwapFeeUpdateScheduledEventFilter;
    GradualSwapFeeUpdateScheduled(
      startTime?: null,
      endTime?: null,
      startSwapFeePercentage?: null,
      endSwapFeePercentage?: null
    ): GradualSwapFeeUpdateScheduledEventFilter;

    "GradualWeightUpdateScheduled(uint256,uint256,uint256[],uint256[])"(
      startTime?: null,
      endTime?: null,
      startWeights?: null,
      endWeights?: null
    ): GradualWeightUpdateScheduledEventFilter;
    GradualWeightUpdateScheduled(
      startTime?: null,
      endTime?: null,
      startWeights?: null,
      endWeights?: null
    ): GradualWeightUpdateScheduledEventFilter;

    "JoinExitEnabledSet(bool)"(
      joinExitEnabled?: null
    ): JoinExitEnabledSetEventFilter;
    JoinExitEnabledSet(joinExitEnabled?: null): JoinExitEnabledSetEventFilter;

    "ManagementAumFeeCollected(uint256)"(
      bptAmount?: null
    ): ManagementAumFeeCollectedEventFilter;
    ManagementAumFeeCollected(
      bptAmount?: null
    ): ManagementAumFeeCollectedEventFilter;

    "ManagementAumFeePercentageChanged(uint256)"(
      managementAumFeePercentage?: null
    ): ManagementAumFeePercentageChangedEventFilter;
    ManagementAumFeePercentageChanged(
      managementAumFeePercentage?: null
    ): ManagementAumFeePercentageChangedEventFilter;

    "MustAllowlistLPsSet(bool)"(
      mustAllowlistLPs?: null
    ): MustAllowlistLPsSetEventFilter;
    MustAllowlistLPsSet(
      mustAllowlistLPs?: null
    ): MustAllowlistLPsSetEventFilter;

    "PausedStateChanged(bool)"(paused?: null): PausedStateChangedEventFilter;
    PausedStateChanged(paused?: null): PausedStateChangedEventFilter;

    "ProtocolFeePercentageCacheUpdated(bytes32)"(
      feeCache?: null
    ): ProtocolFeePercentageCacheUpdatedEventFilter;
    ProtocolFeePercentageCacheUpdated(
      feeCache?: null
    ): ProtocolFeePercentageCacheUpdatedEventFilter;

    "RecoveryModeStateChanged(bool)"(
      enabled?: null
    ): RecoveryModeStateChangedEventFilter;
    RecoveryModeStateChanged(
      enabled?: null
    ): RecoveryModeStateChangedEventFilter;

    "SwapEnabledSet(bool)"(swapEnabled?: null): SwapEnabledSetEventFilter;
    SwapEnabledSet(swapEnabled?: null): SwapEnabledSetEventFilter;

    "TokenAdded(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      normalizedWeight?: null
    ): TokenAddedEventFilter;
    TokenAdded(
      token?: PromiseOrValue<string> | null,
      normalizedWeight?: null
    ): TokenAddedEventFilter;

    "TokenRemoved(address)"(
      token?: PromiseOrValue<string> | null
    ): TokenRemovedEventFilter;
    TokenRemoved(
      token?: PromiseOrValue<string> | null
    ): TokenRemovedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "addAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    addToken(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "addToken(address,address,uint256,uint256,address)"(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectAumManagementFees(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "collectAumManagementFees()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    disableRecoveryMode(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "disableRecoveryMode()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    enableRecoveryMode(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "enableRecoveryMode()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActionId(bytes4)"(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getActualSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCircuitBreakerState(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCircuitBreakerState(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "getDomainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGradualSwapFeeUpdateParams(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGradualSwapFeeUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGradualWeightUpdateParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getGradualWeightUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJoinExitEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "getJoinExitEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    getManagementAumFeeParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getManagementAumFeeParams()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMustAllowlistLPs(overrides?: CallOverrides): Promise<BigNumber>;

    "getMustAllowlistLPs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextNonce(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNormalizedWeights(overrides?: CallOverrides): Promise<BigNumber>;

    "getNormalizedWeights()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPausedState(overrides?: CallOverrides): Promise<BigNumber>;

    "getPausedState()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeePercentageCache(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProtocolFeePercentageCache(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtocolFeesCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProviderFeeId(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderFeeId(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber>;

    "getScalingFactors()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getVirtualSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    inRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;

    "inRecoveryMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    isAddressOnAllowlist(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAddressOnAllowlist(address)"(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwnerOnlyAction(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOwnerOnlyAction(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    queryExit(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    queryJoin(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    removeAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "removeAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    removeToken(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "removeToken(address,uint256,address)"(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setCircuitBreakers(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setCircuitBreakers(address[],uint256[],uint256[],uint256[])"(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setJoinExitEnabled(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setJoinExitEnabled(bool)"(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setManagementAumFeePercentage(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setManagementAumFeePercentage(uint256)"(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setMustAllowlistLPs(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setMustAllowlistLPs(bool)"(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setSwapEnabled(bool)"(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    updateProtocolFeePercentageCache(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "updateProtocolFeePercentageCache()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    updateSwapFeeGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "updateSwapFeeGradually(uint256,uint256,uint256,uint256)"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    updateWeightsGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "updateWeightsGradually(uint256,uint256,address[],uint256[])"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    validateSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateSwapFeePercentage(uint256)"(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "addAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    addToken(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "addToken(address,address,uint256,uint256,address)"(
      tokenToAdd: PromiseOrValue<string>,
      assetManager: PromiseOrValue<string>,
      tokenToAddNormalizedWeight: PromiseOrValue<BigNumberish>,
      mintAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectAumManagementFees(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "collectAumManagementFees()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    disableRecoveryMode(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "disableRecoveryMode()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    enableRecoveryMode(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "enableRecoveryMode()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActionId(bytes4)"(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActualSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getActualSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCircuitBreakerState(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCircuitBreakerState(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDomainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGradualSwapFeeUpdateParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGradualSwapFeeUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGradualWeightUpdateParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGradualWeightUpdateParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJoinExitEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getJoinExitEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManagementAumFeeParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getManagementAumFeeParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMustAllowlistLPs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMustAllowlistLPs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextNonce(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedWeights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNormalizedWeights()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPausedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPausedState()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFeePercentageCache(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProtocolFeePercentageCache(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFeesCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProtocolFeesCollector()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderFeeId(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderFeeId(uint256)"(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScalingFactors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getScalingFactors()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSwapEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVirtualSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVirtualSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inRecoveryMode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    isAddressOnAllowlist(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAddressOnAllowlist(address)"(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwnerOnlyAction(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwnerOnlyAction(bytes32)"(
      actionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    queryExit(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    queryJoin(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    removeAllowedAddress(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "removeAllowedAddress(address)"(
      member: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    removeToken(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "removeToken(address,uint256,address)"(
      tokenToRemove: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setCircuitBreakers(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setCircuitBreakers(address[],uint256[],uint256[],uint256[])"(
      tokens: PromiseOrValue<string>[],
      bptPrices: PromiseOrValue<BigNumberish>[],
      lowerBoundPercentages: PromiseOrValue<BigNumberish>[],
      upperBoundPercentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setJoinExitEnabled(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setJoinExitEnabled(bool)"(
      joinExitEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setManagementAumFeePercentage(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setManagementAumFeePercentage(uint256)"(
      managementAumFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setMustAllowlistLPs(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setMustAllowlistLPs(bool)"(
      mustAllowlistLPs: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setSwapEnabled(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setSwapEnabled(bool)"(
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    updateProtocolFeePercentageCache(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "updateProtocolFeePercentageCache()"(
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    updateSwapFeeGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "updateSwapFeeGradually(uint256,uint256,uint256,uint256)"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      startSwapFeePercentage: PromiseOrValue<BigNumberish>,
      endSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    updateWeightsGradually(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "updateWeightsGradually(uint256,uint256,address[],uint256[])"(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      endWeights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    validateSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateSwapFeePercentage(uint256)"(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
