/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MockManagedPoolTokenStorageLibInterface
  extends utils.Interface {
  functions: {
    "getTokenScalingFactor(bytes32)": FunctionFragment;
    "getTokenStartAndEndWeights(bytes32)": FunctionFragment;
    "getTokenWeight(bytes32,uint256)": FunctionFragment;
    "initializeTokenState(address,uint256)": FunctionFragment;
    "setTokenScalingFactor(bytes32,address)": FunctionFragment;
    "setTokenWeight(bytes32,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTokenScalingFactor"
      | "getTokenScalingFactor(bytes32)"
      | "getTokenStartAndEndWeights"
      | "getTokenStartAndEndWeights(bytes32)"
      | "getTokenWeight"
      | "getTokenWeight(bytes32,uint256)"
      | "initializeTokenState"
      | "initializeTokenState(address,uint256)"
      | "setTokenScalingFactor"
      | "setTokenScalingFactor(bytes32,address)"
      | "setTokenWeight"
      | "setTokenWeight(bytes32,uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTokenScalingFactor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenScalingFactor(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStartAndEndWeights",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStartAndEndWeights(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenWeight",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenWeight(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTokenState",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTokenState(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenScalingFactor",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenScalingFactor(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenWeight",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenWeight(bytes32,uint256,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTokenScalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenScalingFactor(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStartAndEndWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStartAndEndWeights(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenWeight(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeTokenState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeTokenState(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenScalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenScalingFactor(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenWeight(bytes32,uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockManagedPoolTokenStorageLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockManagedPoolTokenStorageLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTokenScalingFactor(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenStartAndEndWeights(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getTokenStartAndEndWeights(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTokenWeight(bytes32,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initializeTokenState(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "initializeTokenState(address,uint256)"(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setTokenScalingFactor(bytes32,address)"(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setTokenWeight(bytes32,uint256,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getTokenScalingFactor(
    tokenState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenScalingFactor(bytes32)"(
    tokenState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenStartAndEndWeights(
    tokenState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getTokenStartAndEndWeights(bytes32)"(
    tokenState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTokenWeight(
    tokenState: PromiseOrValue<BytesLike>,
    pctProgress: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenWeight(bytes32,uint256)"(
    tokenState: PromiseOrValue<BytesLike>,
    pctProgress: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializeTokenState(
    token: PromiseOrValue<string>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "initializeTokenState(address,uint256)"(
    token: PromiseOrValue<string>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setTokenScalingFactor(
    tokenState: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "setTokenScalingFactor(bytes32,address)"(
    tokenState: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setTokenWeight(
    tokenState: PromiseOrValue<BytesLike>,
    normalizedStartWeight: PromiseOrValue<BigNumberish>,
    normalizedEndWeight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "setTokenWeight(bytes32,uint256,uint256)"(
    tokenState: PromiseOrValue<BytesLike>,
    normalizedStartWeight: PromiseOrValue<BigNumberish>,
    normalizedEndWeight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenScalingFactor(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenStartAndEndWeights(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getTokenStartAndEndWeights(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenWeight(bytes32,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeTokenState(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "initializeTokenState(address,uint256)"(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "setTokenScalingFactor(bytes32,address)"(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "setTokenWeight(bytes32,uint256,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenScalingFactor(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenStartAndEndWeights(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenStartAndEndWeights(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenWeight(bytes32,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeTokenState(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initializeTokenState(address,uint256)"(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setTokenScalingFactor(bytes32,address)"(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setTokenWeight(bytes32,uint256,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenScalingFactor(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenStartAndEndWeights(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenStartAndEndWeights(bytes32)"(
      tokenState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenWeight(bytes32,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      pctProgress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeTokenState(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initializeTokenState(address,uint256)"(
      token: PromiseOrValue<string>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenScalingFactor(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setTokenScalingFactor(bytes32,address)"(
      tokenState: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenWeight(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setTokenWeight(bytes32,uint256,uint256)"(
      tokenState: PromiseOrValue<BytesLike>,
      normalizedStartWeight: PromiseOrValue<BigNumberish>,
      normalizedEndWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
