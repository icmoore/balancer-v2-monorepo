/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MockLiquidityBootstrappingPoolStorageLibInterface
  extends utils.Interface {
  functions: {
    "getGradualWeightUpdateParams(bytes32,uint256)": FunctionFragment;
    "getRecoveryMode(bytes32)": FunctionFragment;
    "getSwapEnabled(bytes32)": FunctionFragment;
    "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "setRecoveryMode(bytes32,bool)": FunctionFragment;
    "setSwapEnabled(bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getGradualWeightUpdateParams"
      | "getGradualWeightUpdateParams(bytes32,uint256)"
      | "getRecoveryMode"
      | "getRecoveryMode(bytes32)"
      | "getSwapEnabled"
      | "getSwapEnabled(bytes32)"
      | "setNormalizedWeights"
      | "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])"
      | "setRecoveryMode"
      | "setRecoveryMode(bytes32,bool)"
      | "setSwapEnabled"
      | "setSwapEnabled(bytes32,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGradualWeightUpdateParams",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGradualWeightUpdateParams(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryMode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryMode(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapEnabled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapEnabled(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNormalizedWeights",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryMode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryMode(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGradualWeightUpdateParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGradualWeightUpdateParams(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryMode(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapEnabled(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNormalizedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryMode(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled(bytes32,bool)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockLiquidityBootstrappingPoolStorageLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLiquidityBootstrappingPoolStorageLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGradualWeightUpdateParams(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    "getGradualWeightUpdateParams(bytes32,uint256)"(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    getRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getRecoveryMode(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getSwapEnabled(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setNormalizedWeights(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])"(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setRecoveryMode(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setSwapEnabled(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getGradualWeightUpdateParams(
    poolState: PromiseOrValue<BytesLike>,
    totalTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
      startTime: BigNumber;
      endTime: BigNumber;
      startWeights: BigNumber[];
      endWeights: BigNumber[];
    }
  >;

  "getGradualWeightUpdateParams(bytes32,uint256)"(
    poolState: PromiseOrValue<BytesLike>,
    totalTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
      startTime: BigNumber;
      endTime: BigNumber;
      startWeights: BigNumber[];
      endWeights: BigNumber[];
    }
  >;

  getRecoveryMode(
    poolState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getRecoveryMode(bytes32)"(
    poolState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getSwapEnabled(
    poolState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getSwapEnabled(bytes32)"(
    poolState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setNormalizedWeights(
    poolState: PromiseOrValue<BytesLike>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    newStartWeights: PromiseOrValue<BigNumberish>[],
    newEndWeights: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<string>;

  "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])"(
    poolState: PromiseOrValue<BytesLike>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    newStartWeights: PromiseOrValue<BigNumberish>[],
    newEndWeights: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<string>;

  setRecoveryMode(
    poolState: PromiseOrValue<BytesLike>,
    enabled: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  "setRecoveryMode(bytes32,bool)"(
    poolState: PromiseOrValue<BytesLike>,
    enabled: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  setSwapEnabled(
    poolState: PromiseOrValue<BytesLike>,
    swapEnabled: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  "setSwapEnabled(bytes32,bool)"(
    poolState: PromiseOrValue<BytesLike>,
    swapEnabled: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getGradualWeightUpdateParams(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    "getGradualWeightUpdateParams(bytes32,uint256)"(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[]] & {
        startTime: BigNumber;
        endTime: BigNumber;
        startWeights: BigNumber[];
        endWeights: BigNumber[];
      }
    >;

    getRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getRecoveryMode(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getSwapEnabled(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setNormalizedWeights(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string>;

    "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])"(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string>;

    setRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "setRecoveryMode(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    setSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "setSwapEnabled(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getGradualWeightUpdateParams(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGradualWeightUpdateParams(bytes32,uint256)"(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecoveryMode(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapEnabled(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNormalizedWeights(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])"(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setRecoveryMode(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setSwapEnabled(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGradualWeightUpdateParams(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGradualWeightUpdateParams(bytes32,uint256)"(
      poolState: PromiseOrValue<BytesLike>,
      totalTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecoveryMode(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapEnabled(bytes32)"(
      poolState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNormalizedWeights(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setNormalizedWeights(bytes32,uint256,uint256,uint256[],uint256[])"(
      poolState: PromiseOrValue<BytesLike>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      newStartWeights: PromiseOrValue<BigNumberish>[],
      newEndWeights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRecoveryMode(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setRecoveryMode(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSwapEnabled(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setSwapEnabled(bytes32,bool)"(
      poolState: PromiseOrValue<BytesLike>,
      swapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
