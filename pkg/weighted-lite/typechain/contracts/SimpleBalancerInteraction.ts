/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SimpleBalancerInteractionInterface extends utils.Interface {
  functions: {
    "balancerPool()": FunctionFragment;
    "getContractName()": FunctionFragment;
    "provideLiquidity(uint256,uint256)": FunctionFragment;
    "token1()": FunctionFragment;
    "token2()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balancerPool"
      | "balancerPool()"
      | "getContractName"
      | "getContractName()"
      | "provideLiquidity"
      | "provideLiquidity(uint256,uint256)"
      | "token1"
      | "token1()"
      | "token2"
      | "token2()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancerPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPool()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1()", values?: undefined): string;
  encodeFunctionData(functionFragment: "token2", values?: undefined): string;
  encodeFunctionData(functionFragment: "token2()", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "balancerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerPool()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2()", data: BytesLike): Result;

  events: {};
}

export interface SimpleBalancerInteraction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleBalancerInteractionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balancerPool(overrides?: CallOverrides): Promise<[string]>;

    "balancerPool()"(overrides?: CallOverrides): Promise<[string]>;

    getContractName(overrides?: CallOverrides): Promise<[string]>;

    "getContractName()"(overrides?: CallOverrides): Promise<[string]>;

    provideLiquidity(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "provideLiquidity(uint256,uint256)"(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    "token1()"(overrides?: CallOverrides): Promise<[string]>;

    token2(overrides?: CallOverrides): Promise<[string]>;

    "token2()"(overrides?: CallOverrides): Promise<[string]>;
  };

  balancerPool(overrides?: CallOverrides): Promise<string>;

  "balancerPool()"(overrides?: CallOverrides): Promise<string>;

  getContractName(overrides?: CallOverrides): Promise<string>;

  "getContractName()"(overrides?: CallOverrides): Promise<string>;

  provideLiquidity(
    amountToken1: PromiseOrValue<BigNumberish>,
    amountToken2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "provideLiquidity(uint256,uint256)"(
    amountToken1: PromiseOrValue<BigNumberish>,
    amountToken2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  token1(overrides?: CallOverrides): Promise<string>;

  "token1()"(overrides?: CallOverrides): Promise<string>;

  token2(overrides?: CallOverrides): Promise<string>;

  "token2()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balancerPool(overrides?: CallOverrides): Promise<string>;

    "balancerPool()"(overrides?: CallOverrides): Promise<string>;

    getContractName(overrides?: CallOverrides): Promise<string>;

    "getContractName()"(overrides?: CallOverrides): Promise<string>;

    provideLiquidity(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "provideLiquidity(uint256,uint256)"(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token1(overrides?: CallOverrides): Promise<string>;

    "token1()"(overrides?: CallOverrides): Promise<string>;

    token2(overrides?: CallOverrides): Promise<string>;

    "token2()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balancerPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balancerPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getContractName(overrides?: CallOverrides): Promise<BigNumber>;

    "getContractName()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidity(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "provideLiquidity(uint256,uint256)"(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    "token1()"(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<BigNumber>;

    "token2()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balancerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balancerPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getContractName()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideLiquidity(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "provideLiquidity(uint256,uint256)"(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
