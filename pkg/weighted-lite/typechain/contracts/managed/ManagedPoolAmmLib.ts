/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ManagedPoolAmmLibInterface extends utils.Interface {
  functions: {
    "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)": FunctionFragment;
    "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)": FunctionFragment;
    "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)": FunctionFragment;
    "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkCircuitBreaker"
      | "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)"
      | "checkCircuitBreakers"
      | "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)"
      | "checkOneSidedCircuitBreaker"
      | "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)"
      | "exitPool"
      | "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"
      | "joinPool"
      | "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkCircuitBreaker",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCircuitBreakers",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOneSidedCircuitBreaker",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCircuitBreakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOneSidedCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ManagedPoolAmmLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagedPoolAmmLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkCircuitBreaker(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)"(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkCircuitBreakers(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)"(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkOneSidedCircuitBreaker(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    exitPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
      }
    >;

    "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
      }
    >;

    joinPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;

    "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;
  };

  checkCircuitBreaker(
    checkKind: PromiseOrValue<BigNumberish>,
    circuitBreakerState: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)"(
    checkKind: PromiseOrValue<BigNumberish>,
    circuitBreakerState: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkCircuitBreakers(
    actualSupply: PromiseOrValue<BigNumberish>,
    circuitBreakerStates: PromiseOrValue<BytesLike>[],
    balances: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    isJoin: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)"(
    actualSupply: PromiseOrValue<BigNumberish>,
    circuitBreakerStates: PromiseOrValue<BytesLike>[],
    balances: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    isJoin: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkOneSidedCircuitBreaker(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    isLowerBound: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)"(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    isLowerBound: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  exitPool(
    balances: PromiseOrValue<BigNumberish>[],
    userData: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    scalingFactors: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    poolState: PromiseOrValue<BytesLike>,
    circuitBreakerStates: PromiseOrValue<BytesLike>[],
    weightedMath: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {bptAmountIn: BigNumber; amountsOut: BigNumber[]}
  >;

  "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
    balances: PromiseOrValue<BigNumberish>[],
    userData: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    scalingFactors: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    poolState: PromiseOrValue<BytesLike>,
    circuitBreakerStates: PromiseOrValue<BytesLike>[],
    weightedMath: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {bptAmountIn: BigNumber; amountsOut: BigNumber[]}
  >;

  joinPool(
    balances: PromiseOrValue<BigNumberish>[],
    userData: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    scalingFactors: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    poolState: PromiseOrValue<BytesLike>,
    circuitBreakerStates: PromiseOrValue<BytesLike>[],
    weightedMath: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {bptAmountOut: BigNumber; amountsIn: BigNumber[]}
  >;

  "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
    balances: PromiseOrValue<BigNumberish>[],
    userData: PromiseOrValue<BytesLike>,
    actualSupply: PromiseOrValue<BigNumberish>,
    scalingFactors: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    poolState: PromiseOrValue<BytesLike>,
    circuitBreakerStates: PromiseOrValue<BytesLike>[],
    weightedMath: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {bptAmountOut: BigNumber; amountsIn: BigNumber[]}
  >;

  callStatic: {
    checkCircuitBreaker(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)"(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCircuitBreakers(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)"(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkOneSidedCircuitBreaker(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
      }
    >;

    "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
      }
    >;

    joinPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;

    "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    checkCircuitBreaker(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)"(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCircuitBreakers(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)"(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkOneSidedCircuitBreaker(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkCircuitBreaker(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkCircuitBreaker(uint8,bytes32,uint256,uint256,uint256)"(
      checkKind: PromiseOrValue<BigNumberish>,
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCircuitBreakers(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkCircuitBreakers(uint256,bytes32[],uint256[],uint256[],uint256[],bool)"(
      actualSupply: PromiseOrValue<BigNumberish>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      balances: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      isJoin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkOneSidedCircuitBreaker(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkOneSidedCircuitBreaker(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "joinPool(uint256[],bytes,uint256,uint256[],uint256[],bytes32,bytes32[],IExternalWeightedMath)"(
      balances: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      actualSupply: PromiseOrValue<BigNumberish>,
      scalingFactors: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      poolState: PromiseOrValue<BytesLike>,
      circuitBreakerStates: PromiseOrValue<BytesLike>[],
      weightedMath: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
