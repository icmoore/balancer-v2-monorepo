/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../common";
import type {
  MockValueCompression,
  MockValueCompressionInterface,
} from "../../../contracts/test/MockValueCompression";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bitLength",
        type: "uint256",
      },
    ],
    name: "compress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bitLength",
        type: "uint256",
      },
    ],
    name: "decompress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bitLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxUncompressedValue",
        type: "uint256",
      },
    ],
    name: "fullCompress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bitLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxUncompressedValue",
        type: "uint256",
      },
    ],
    name: "fullDecompress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061036c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632c77b09b146100515780636882933d1461008c578063aba987c0146100af578063e385b2b0146100d2575b600080fd5b61007a6004803603606081101561006757600080fd5b50803590602081013590604001356100fb565b60408051918252519081900360200190f35b61007a600480360360408110156100a257600080fd5b5080359060200135610110565b61007a600480360360408110156100c557600080fd5b5080359060200135610123565b61007a600480360360608110156100e857600080fd5b508035906020810135906040013561012f565b600061010884848461013c565b949350505050565b600061011c83836101aa565b9392505050565b600061011c83836101bf565b60006101088484846101d4565b600061015a60028410158015610153575060ff8411155b6064610238565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001841b0161018e818611156064610238565b6101a161019b868561024a565b8261026e565b95945050505050565b600061011c8383670de0b6b3a76400006101d4565b600061011c8383670de0b6b3a764000061013c565b60006101f160028410158015610153575060ff8411156064610238565b6101ff828511156064610238565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001841b016101a1610232868361024a565b8461026e565b81610246576102468161028e565b5050565b600082820261011c84158061026757508385838161026457fe5b04145b6003610238565b600061027d8215156004610238565b81838161028657fe5b049392505050565b6102b8817f42414c00000000000000000000000000000000000000000000000000000000006102bb565b50565b7f08c379a000000000000000000000000000000000000000000000000000000000600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fdfea2646970667358221220e624f3302d0743bcbcdd031534892d1cbd991c761a027c021a9eefcd5c936b4764736f6c63430007010033";

type MockValueCompressionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockValueCompressionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockValueCompression__factory extends ContractFactory {
  constructor(...args: MockValueCompressionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<MockValueCompression> {
    return super.deploy(overrides || {}) as Promise<MockValueCompression>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockValueCompression {
    return super.attach(address) as MockValueCompression;
  }
  override connect(signer: Signer): MockValueCompression__factory {
    return super.connect(signer) as MockValueCompression__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockValueCompressionInterface {
    return new utils.Interface(_abi) as MockValueCompressionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockValueCompression {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockValueCompression;
  }
}
