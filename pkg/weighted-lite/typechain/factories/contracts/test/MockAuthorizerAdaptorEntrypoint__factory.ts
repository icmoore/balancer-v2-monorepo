/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../common";
import type {
  MockAuthorizerAdaptorEntrypoint,
  MockAuthorizerAdaptorEntrypointInterface,
} from "../../../contracts/test/MockAuthorizerAdaptorEntrypoint";

const _abi = [
  {
    inputs: [],
    name: "getAuthorizerAdaptor",
    outputs: [
      {
        internalType: "contract IAuthorizerAdaptor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a18061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638d928af8146037578063e758d36b146037575b600080fd5b603d6066565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60009056fea26469706673582212204379fdb2668c749853966f4f12d357e9404539d1196b358b56cae354001d093e64736f6c63430007010033";

type MockAuthorizerAdaptorEntrypointConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAuthorizerAdaptorEntrypointConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAuthorizerAdaptorEntrypoint__factory extends ContractFactory {
  constructor(...args: MockAuthorizerAdaptorEntrypointConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<MockAuthorizerAdaptorEntrypoint> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockAuthorizerAdaptorEntrypoint>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAuthorizerAdaptorEntrypoint {
    return super.attach(address) as MockAuthorizerAdaptorEntrypoint;
  }
  override connect(signer: Signer): MockAuthorizerAdaptorEntrypoint__factory {
    return super.connect(signer) as MockAuthorizerAdaptorEntrypoint__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAuthorizerAdaptorEntrypointInterface {
    return new utils.Interface(
      _abi
    ) as MockAuthorizerAdaptorEntrypointInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAuthorizerAdaptorEntrypoint {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAuthorizerAdaptorEntrypoint;
  }
}
