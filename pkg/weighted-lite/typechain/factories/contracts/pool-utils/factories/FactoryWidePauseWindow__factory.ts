/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../../common";
import type {
  FactoryWidePauseWindow,
  FactoryWidePauseWindowInterface,
} from "../../../../contracts/pool-utils/factories/FactoryWidePauseWindow";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialPauseWindowDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bufferPeriodDuration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getPauseConfiguration",
    outputs: [
      {
        internalType: "uint256",
        name: "pauseWindowDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bufferPeriodDuration",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161024938038061024983398101604081905261002f916100ec565b610042630163f500831115610194610066565b6100546276a700821115610195610066565b608082905260a052420160c05261010f565b816100745761007481610078565b5050565b610088816210905360ea1b61008b565b50565b62461bcd60e51b600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b600080604083850312156100fe578182fd5b505080516020909101519092909150565b60805160a05160c05161011161013860003980604e52806076525080609a5250506101116000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632da47c4014602d575b600080fd5b60336048565b604051603f92919060cd565b60405180910390f35b600080427f000000000000000000000000000000000000000000000000000000000000000081101560bf57807f00000000000000000000000000000000000000000000000000000000000000000392507f0000000000000000000000000000000000000000000000000000000000000000915060c8565b60009250600091505b509091565b91825260208201526040019056fea2646970667358221220766b118afd936b79bbe65b4e99d04588f0068f9fd90aa863f436cfa946145f3864736f6c63430007010033";

type FactoryWidePauseWindowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryWidePauseWindowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryWidePauseWindow__factory extends ContractFactory {
  constructor(...args: FactoryWidePauseWindowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialPauseWindowDuration: PromiseOrValue<BigNumberish>,
    bufferPeriodDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<FactoryWidePauseWindow> {
    return super.deploy(
      initialPauseWindowDuration,
      bufferPeriodDuration,
      overrides || {}
    ) as Promise<FactoryWidePauseWindow>;
  }
  override getDeployTransaction(
    initialPauseWindowDuration: PromiseOrValue<BigNumberish>,
    bufferPeriodDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(
      initialPauseWindowDuration,
      bufferPeriodDuration,
      overrides || {}
    );
  }
  override attach(address: string): FactoryWidePauseWindow {
    return super.attach(address) as FactoryWidePauseWindow;
  }
  override connect(signer: Signer): FactoryWidePauseWindow__factory {
    return super.connect(signer) as FactoryWidePauseWindow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryWidePauseWindowInterface {
    return new utils.Interface(_abi) as FactoryWidePauseWindowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryWidePauseWindow {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FactoryWidePauseWindow;
  }
}
