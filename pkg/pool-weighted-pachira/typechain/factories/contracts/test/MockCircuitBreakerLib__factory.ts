/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import type {Provider, TransactionRequest} from "@ethersproject/providers";
import type {PromiseOrValue} from "../../../common";
import type {
  MockCircuitBreakerLib,
  MockCircuitBreakerLibInterface,
} from "../../../contracts/test/MockCircuitBreakerLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "circuitBreakerState",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "currentWeight",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isLowerBound",
        type: "bool",
      },
    ],
    name: "getBptPriceBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "circuitBreakerState",
        type: "bytes32",
      },
    ],
    name: "getCircuitBreakerFields",
    outputs: [
      {
        internalType: "uint256",
        name: "bptPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weightComplement",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "circuitBreakerState",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "virtualSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "normalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "upscaledBalance",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isLowerBound",
        type: "bool",
      },
    ],
    name: "hasCircuitBreakerTripped",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bptPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weightComplement",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "setCircuitBreaker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "circuitBreakerState",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
    ],
    name: "updateAdjustedBounds",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b68806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063ddfb944511610050578063ddfb9445146100b5578063e59b31d7146100c8578063e800a45e146100eb57610067565b80631bb3aa081461006c578063cf32ec2514610095575b600080fd5b61007f61007a366004610aba565b6100fe565b60405161008c9190610af6565b60405180910390f35b6100a86100a3366004610a59565b610115565b60405161008c9190610aeb565b61007f6100c3366004610a24565b61013d565b6100db6100d63660046109eb565b610154565b60405161008c9493929190610b17565b61007f6100f9366004610a03565b610172565b600061010c85858585610187565b95945050505050565b600080610123878685610394565b905061013286868684876104db565b979650505050505050565b600061014a848484610394565b90505b9392505050565b6000806000806101638561051d565b93509350935093509193509193565b600061017e838361056b565b90505b92915050565b60006101bc8315806101b4575067016345785d8a000084101580156101b45750670de0b6b3a76400008411155b610163610702565b6101d3678ac7230489e80000831115610163610702565b6101ea8215806101b4575083831015610163610702565b60006102098560206040610201858b606080610714565b929190610714565b905061022a603084811c9060109081906102019086908a901c600084610714565b9050600073__$6670886e635fd86503a30ff6f4e4ebb80f$__63f4d8cb7c868860016040518463ffffffff1660e01b815260040161026a93929190610aff565b60206040518083038186803b15801561028257600080fd5b505af4158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610aa2565b9050600073__$6670886e635fd86503a30ff6f4e4ebb80f$__63f4d8cb7c868960006040518463ffffffff1660e01b81526004016102fa93929190610aff565b60206040518083038186803b15801561031257600080fd5b505af4158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610aa2565b9050610388610363826020678ac7230489e80000610737565b60e0602061020161037d8783678ac7230489e80000610737565b889060c06020610714565b98975050505050505050565b60008060306103b4846103a85760106103ab565b60005b8790601061077e565b901b9050806103c757600091505061014d565b60006103d58660608061077e565b905060006103e6876020604061077e565b9050600081871415610429576104226020678ac7230489e8000061041b8961040f5760e0610412565b60c05b8c90602061077e565b919061078d565b90506104d0565b6040517ff4d8cb7c00000000000000000000000000000000000000000000000000000000815273__$6670886e635fd86503a30ff6f4e4ebb80f$__9063f4d8cb7c9061047d9087908b908b90600401610aff565b60206040518083038186803b15801561049557600080fd5b505af41580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190610aa2565b90505b6103888184886107d3565b6000826104ea5750600061010c565b60006105016104f988886107f3565b868515610817565b90508261051057838111610132565b9290921095945050505050565b600080808061052e8560608061077e565b935061053d856020604061077e565b9250603061054e866000601061077e565b901b915060306105608660108061077e565b901b90509193509193565b60008073__$6670886e635fd86503a30ff6f4e4ebb80f$__63f4d8cb7c60306105968785601061077e565b901b8560016040518463ffffffff1660e01b81526004016105b993929190610aff565b60206040518083038186803b1580156105d157600080fd5b505af41580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190610aa2565b9050600073__$6670886e635fd86503a30ff6f4e4ebb80f$__63f4d8cb7c60306106358860108061077e565b901b8660006040518463ffffffff1660e01b815260040161065893929190610aff565b60206040518083038186803b15801561067057600080fd5b505af4158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190610aa2565b905060006106ba868660206040610714565b90506106f86106d3836020678ac7230489e80000610737565b60e060206102016106ed8883678ac7230489e80000610737565b869060c06020610714565b9695505050505050565b816107105761071081610837565b5050565b6000610721848484610864565b506001901b60001901811b1992909216911b1790565b60006107556002841015801561074e575060ff8411155b6064610702565b610763828511156064610702565b6000196001841b0161010c61077886836107f3565b846108af565b6001901b6000190191901c1690565b60006107aa6002841015801561074e575060ff8411156064610702565b6000196001841b016107c0818611156064610702565b61010c6107cd86856107f3565b826108af565b600061014a8385846107e7576108cf6107eb565b6108fb5b63ffffffff16565b600082820261017e84158061081057508385838161080d57fe5b04145b6003610702565b60008161082d5761082884846108af565b61014a565b61014a8484610933565b610861817f42414c0000000000000000000000000000000000000000000000000000000000610954565b50565b61087361010083106064610702565b61089b6001821015801561074e575061089160ff84610100036109cf565b8211156064610702565b6108aa83821c156101b4610702565b505050565b60006108be8215156004610702565b8183816108c757fe5b049392505050565b60008282026108e984158061081057508385838161080d57fe5b670de0b6b3a764000090049392505050565b600082820261091584158061081057508385838161080d57fe5b6001670de0b6b3a76400006001830304018115150291505092915050565b60006109428215156004610702565b50811515600019909201046001010290565b7f08c379a000000000000000000000000000000000000000000000000000000000600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b80820390821102900390565b8035801515811461018157600080fd5b6000602082840312156109fc578081fd5b5035919050565b60008060408385031215610a15578081fd5b50508035926020909101359150565b600080600060608486031215610a38578081fd5b8335925060208401359150610a5085604086016109db565b90509250925092565b600080600080600060a08688031215610a70578081fd5b85359450602086013593506040860135925060608601359150610a9687608088016109db565b90509295509295909350565b600060208284031215610ab3578081fd5b5051919050565b60008060008060808587031215610acf578384fd5b5050823594602084013594506040840135936060013592509050565b901515815260200190565b90815260200190565b92835260208301919091521515604082015260600190565b9384526020840192909252604083015260608201526080019056fea264697066735822122071a4e6dc190105be0d40e28cab4b4a1f078c983ba286a9251925f820e82158a964736f6c63430007010033";

type MockCircuitBreakerLibConstructorParams =
  | [
      linkLibraryAddresses: MockCircuitBreakerLibLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCircuitBreakerLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockCircuitBreakerLib__factory extends ContractFactory {
  constructor(...args: MockCircuitBreakerLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockCircuitBreakerLib__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockCircuitBreakerLibLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$6670886e635fd86503a30ff6f4e4ebb80f\\$__", "g"),
      linkLibraryAddresses[
        "contracts/lib/CircuitBreakerLib.sol:CircuitBreakerLib"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<MockCircuitBreakerLib> {
    return super.deploy(overrides || {}) as Promise<MockCircuitBreakerLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockCircuitBreakerLib {
    return super.attach(address) as MockCircuitBreakerLib;
  }
  override connect(signer: Signer): MockCircuitBreakerLib__factory {
    return super.connect(signer) as MockCircuitBreakerLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCircuitBreakerLibInterface {
    return new utils.Interface(_abi) as MockCircuitBreakerLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCircuitBreakerLib {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockCircuitBreakerLib;
  }
}

export interface MockCircuitBreakerLibLibraryAddresses {
  ["contracts/lib/CircuitBreakerLib.sol:CircuitBreakerLib"]: string;
}
