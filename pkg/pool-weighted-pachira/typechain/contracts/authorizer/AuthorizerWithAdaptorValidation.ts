/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AuthorizerWithAdaptorValidationInterface
  extends utils.Interface {
  functions: {
    "canPerform(bytes32,address,address)": FunctionFragment;
    "getActualAuthorizer()": FunctionFragment;
    "getAuthorizerAdaptor()": FunctionFragment;
    "getAuthorizerAdaptorEntrypoint()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPerform"
      | "canPerform(bytes32,address,address)"
      | "getActualAuthorizer"
      | "getActualAuthorizer()"
      | "getAuthorizerAdaptor"
      | "getAuthorizerAdaptor()"
      | "getAuthorizerAdaptorEntrypoint"
      | "getAuthorizerAdaptorEntrypoint()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canPerform",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform(bytes32,address,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActualAuthorizer()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizerAdaptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizerAdaptor()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizerAdaptorEntrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizerAdaptorEntrypoint()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canPerform(bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualAuthorizer()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizerAdaptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizerAdaptor()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizerAdaptorEntrypoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizerAdaptorEntrypoint()",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AuthorizerWithAdaptorValidation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthorizerWithAdaptorValidationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canPerform(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getActualAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    "getActualAuthorizer()"(overrides?: CallOverrides): Promise<[string]>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<[string]>;

    "getAuthorizerAdaptor()"(overrides?: CallOverrides): Promise<[string]>;

    getAuthorizerAdaptorEntrypoint(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAuthorizerAdaptorEntrypoint()"(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  canPerform(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canPerform(bytes32,address,address)"(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getActualAuthorizer(overrides?: CallOverrides): Promise<string>;

  "getActualAuthorizer()"(overrides?: CallOverrides): Promise<string>;

  getAuthorizerAdaptor(overrides?: CallOverrides): Promise<string>;

  "getAuthorizerAdaptor()"(overrides?: CallOverrides): Promise<string>;

  getAuthorizerAdaptorEntrypoint(overrides?: CallOverrides): Promise<string>;

  "getAuthorizerAdaptorEntrypoint()"(
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canPerform(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActualAuthorizer(overrides?: CallOverrides): Promise<string>;

    "getActualAuthorizer()"(overrides?: CallOverrides): Promise<string>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<string>;

    "getAuthorizerAdaptor()"(overrides?: CallOverrides): Promise<string>;

    getAuthorizerAdaptorEntrypoint(overrides?: CallOverrides): Promise<string>;

    "getAuthorizerAdaptorEntrypoint()"(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPerform(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActualAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    "getActualAuthorizer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizerAdaptor(overrides?: CallOverrides): Promise<BigNumber>;

    "getAuthorizerAdaptor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizerAdaptorEntrypoint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuthorizerAdaptorEntrypoint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPerform(bytes32,address,address)"(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActualAuthorizer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActualAuthorizer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizerAdaptor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuthorizerAdaptor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizerAdaptorEntrypoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuthorizerAdaptorEntrypoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
