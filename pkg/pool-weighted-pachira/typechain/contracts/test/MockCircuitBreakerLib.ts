/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MockCircuitBreakerLibInterface extends utils.Interface {
  functions: {
    "getBptPriceBound(bytes32,uint256,bool)": FunctionFragment;
    "getCircuitBreakerFields(bytes32)": FunctionFragment;
    "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)": FunctionFragment;
    "setCircuitBreaker(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateAdjustedBounds(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBptPriceBound"
      | "getBptPriceBound(bytes32,uint256,bool)"
      | "getCircuitBreakerFields"
      | "getCircuitBreakerFields(bytes32)"
      | "hasCircuitBreakerTripped"
      | "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)"
      | "setCircuitBreaker"
      | "setCircuitBreaker(uint256,uint256,uint256,uint256)"
      | "updateAdjustedBounds"
      | "updateAdjustedBounds(bytes32,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBptPriceBound",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBptPriceBound(bytes32,uint256,bool)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCircuitBreakerFields",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCircuitBreakerFields(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCircuitBreakerTripped",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreaker",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreaker(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdjustedBounds",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdjustedBounds(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBptPriceBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBptPriceBound(bytes32,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitBreakerFields",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitBreakerFields(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCircuitBreakerTripped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreaker(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdjustedBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdjustedBounds(bytes32,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockCircuitBreakerLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockCircuitBreakerLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBptPriceBound(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBptPriceBound(bytes32,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCircuitBreakerFields(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        weightComplement: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
      }
    >;

    "getCircuitBreakerFields(bytes32)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        weightComplement: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
      }
    >;

    hasCircuitBreakerTripped(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setCircuitBreaker(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setCircuitBreaker(uint256,uint256,uint256,uint256)"(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateAdjustedBounds(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "updateAdjustedBounds(bytes32,uint256)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getBptPriceBound(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    currentWeight: PromiseOrValue<BigNumberish>,
    isLowerBound: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBptPriceBound(bytes32,uint256,bool)"(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    currentWeight: PromiseOrValue<BigNumberish>,
    isLowerBound: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCircuitBreakerFields(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bptPrice: BigNumber;
      weightComplement: BigNumber;
      lowerBound: BigNumber;
      upperBound: BigNumber;
    }
  >;

  "getCircuitBreakerFields(bytes32)"(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bptPrice: BigNumber;
      weightComplement: BigNumber;
      lowerBound: BigNumber;
      upperBound: BigNumber;
    }
  >;

  hasCircuitBreakerTripped(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    virtualSupply: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    upscaledBalance: PromiseOrValue<BigNumberish>,
    isLowerBound: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)"(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    virtualSupply: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    upscaledBalance: PromiseOrValue<BigNumberish>,
    isLowerBound: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setCircuitBreaker(
    bptPrice: PromiseOrValue<BigNumberish>,
    weightComplement: PromiseOrValue<BigNumberish>,
    lowerBound: PromiseOrValue<BigNumberish>,
    upperBound: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "setCircuitBreaker(uint256,uint256,uint256,uint256)"(
    bptPrice: PromiseOrValue<BigNumberish>,
    weightComplement: PromiseOrValue<BigNumberish>,
    lowerBound: PromiseOrValue<BigNumberish>,
    upperBound: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateAdjustedBounds(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "updateAdjustedBounds(bytes32,uint256)"(
    circuitBreakerState: PromiseOrValue<BytesLike>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getBptPriceBound(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBptPriceBound(bytes32,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCircuitBreakerFields(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        weightComplement: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
      }
    >;

    "getCircuitBreakerFields(bytes32)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bptPrice: BigNumber;
        weightComplement: BigNumber;
        lowerBound: BigNumber;
        upperBound: BigNumber;
      }
    >;

    hasCircuitBreakerTripped(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setCircuitBreaker(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "setCircuitBreaker(uint256,uint256,uint256,uint256)"(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateAdjustedBounds(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "updateAdjustedBounds(bytes32,uint256)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getBptPriceBound(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBptPriceBound(bytes32,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCircuitBreakerFields(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCircuitBreakerFields(bytes32)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasCircuitBreakerTripped(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCircuitBreaker(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setCircuitBreaker(uint256,uint256,uint256,uint256)"(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAdjustedBounds(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "updateAdjustedBounds(bytes32,uint256)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBptPriceBound(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBptPriceBound(bytes32,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      currentWeight: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCircuitBreakerFields(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCircuitBreakerFields(bytes32)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasCircuitBreakerTripped(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasCircuitBreakerTripped(bytes32,uint256,uint256,uint256,bool)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      virtualSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      upscaledBalance: PromiseOrValue<BigNumberish>,
      isLowerBound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCircuitBreaker(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setCircuitBreaker(uint256,uint256,uint256,uint256)"(
      bptPrice: PromiseOrValue<BigNumberish>,
      weightComplement: PromiseOrValue<BigNumberish>,
      lowerBound: PromiseOrValue<BigNumberish>,
      upperBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAdjustedBounds(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "updateAdjustedBounds(bytes32,uint256)"(
      circuitBreakerState: PromiseOrValue<BytesLike>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
