/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {FunctionFragment, Result, EventFragment} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IProtocolFeesCollectorInterface extends utils.Interface {
  functions: {
    "getAuthorizer()": FunctionFragment;
    "getCollectedFeeAmounts(address[])": FunctionFragment;
    "getFlashLoanFeePercentage()": FunctionFragment;
    "getSwapFeePercentage()": FunctionFragment;
    "setFlashLoanFeePercentage(uint256)": FunctionFragment;
    "setSwapFeePercentage(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawCollectedFees(address[],uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAuthorizer"
      | "getAuthorizer()"
      | "getCollectedFeeAmounts"
      | "getCollectedFeeAmounts(address[])"
      | "getFlashLoanFeePercentage"
      | "getFlashLoanFeePercentage()"
      | "getSwapFeePercentage"
      | "getSwapFeePercentage()"
      | "setFlashLoanFeePercentage"
      | "setFlashLoanFeePercentage(uint256)"
      | "setSwapFeePercentage"
      | "setSwapFeePercentage(uint256)"
      | "vault"
      | "vault()"
      | "withdrawCollectedFees"
      | "withdrawCollectedFees(address[],uint256[],address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedFeeAmounts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedFeeAmounts(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFeePercentage()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFeePercentage(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeePercentage(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCollectedFees",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollectedFees(address[],uint256[],address)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedFeeAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedFeeAmounts(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFeePercentage()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFeePercentage(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeePercentage(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollectedFees(address[],uint256[],address)",
    data: BytesLike
  ): Result;

  events: {
    "FlashLoanFeePercentageChanged(uint256)": EventFragment;
    "SwapFeePercentageChanged(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "FlashLoanFeePercentageChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FlashLoanFeePercentageChanged(uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeePercentageChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapFeePercentageChanged(uint256)"
  ): EventFragment;
}

export interface FlashLoanFeePercentageChangedEventObject {
  newFlashLoanFeePercentage: BigNumber;
}
export type FlashLoanFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  FlashLoanFeePercentageChangedEventObject
>;

export type FlashLoanFeePercentageChangedEventFilter =
  TypedEventFilter<FlashLoanFeePercentageChangedEvent>;

export interface SwapFeePercentageChangedEventObject {
  newSwapFeePercentage: BigNumber;
}
export type SwapFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  SwapFeePercentageChangedEventObject
>;

export type SwapFeePercentageChangedEventFilter =
  TypedEventFilter<SwapFeePercentageChangedEvent>;

export interface IProtocolFeesCollector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProtocolFeesCollectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<[string]>;

    getCollectedFeeAmounts(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & {feeAmounts: BigNumber[]}>;

    "getCollectedFeeAmounts(address[])"(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & {feeAmounts: BigNumber[]}>;

    getFlashLoanFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFlashLoanFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFlashLoanFeePercentage(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setFlashLoanFeePercentage(uint256)"(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    setSwapFeePercentage(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "setSwapFeePercentage(uint256)"(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawCollectedFees(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;

    "withdrawCollectedFees(address[],uint256[],address)"(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<ContractTransaction>;
  };

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  "getAuthorizer()"(overrides?: CallOverrides): Promise<string>;

  getCollectedFeeAmounts(
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getCollectedFeeAmounts(address[])"(
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFlashLoanFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getFlashLoanFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  setFlashLoanFeePercentage(
    newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setFlashLoanFeePercentage(uint256)"(
    newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  setSwapFeePercentage(
    newSwapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "setSwapFeePercentage(uint256)"(
    newSwapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  withdrawCollectedFees(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  "withdrawCollectedFees(address[],uint256[],address)"(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & {from?: PromiseOrValue<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<string>;

    getCollectedFeeAmounts(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getCollectedFeeAmounts(address[])"(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFlashLoanFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getFlashLoanFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFlashLoanFeePercentage(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFlashLoanFeePercentage(uint256)"(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFeePercentage(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwapFeePercentage(uint256)"(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    withdrawCollectedFees(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawCollectedFees(address[],uint256[],address)"(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FlashLoanFeePercentageChanged(uint256)"(
      newFlashLoanFeePercentage?: null
    ): FlashLoanFeePercentageChangedEventFilter;
    FlashLoanFeePercentageChanged(
      newFlashLoanFeePercentage?: null
    ): FlashLoanFeePercentageChangedEventFilter;

    "SwapFeePercentageChanged(uint256)"(
      newSwapFeePercentage?: null
    ): SwapFeePercentageChangedEventFilter;
    SwapFeePercentageChanged(
      newSwapFeePercentage?: null
    ): SwapFeePercentageChangedEventFilter;
  };

  estimateGas: {
    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectedFeeAmounts(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollectedFeeAmounts(address[])"(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlashLoanFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getFlashLoanFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFlashLoanFeePercentage(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setFlashLoanFeePercentage(uint256)"(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    setSwapFeePercentage(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "setSwapFeePercentage(uint256)"(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollectedFees(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;

    "withdrawCollectedFees(address[],uint256[],address)"(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAuthorizer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectedFeeAmounts(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollectedFeeAmounts(address[])"(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlashLoanFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFlashLoanFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFlashLoanFeePercentage(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setFlashLoanFeePercentage(uint256)"(
      newFlashLoanFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    setSwapFeePercentage(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "setSwapFeePercentage(uint256)"(
      newSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollectedFees(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;

    "withdrawCollectedFees(address[],uint256[],address)"(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & {from?: PromiseOrValue<string>}
    ): Promise<PopulatedTransaction>;
  };
}
